/*
 * generated by Xtext 2.12.0
 */
grammar InternalSmc;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package soton.cyber.smcaas.smc.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package soton.cyber.smcaas.smc.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import soton.cyber.smcaas.smc.services.SmcGrammarAccess;

}
@parser::members {
	private SmcGrammarAccess grammarAccess;

	public void setGrammarAccess(SmcGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleSmc
entryRuleSmc
:
{ before(grammarAccess.getSmcRule()); }
	 ruleSmc
{ after(grammarAccess.getSmcRule()); } 
	 EOF 
;

// Rule Smc
ruleSmc 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSmcAccess().getUnorderedGroup()); }
		(rule__Smc__UnorderedGroup)
		{ after(grammarAccess.getSmcAccess().getUnorderedGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlockSMC
entryRuleBlockSMC
:
{ before(grammarAccess.getBlockSMCRule()); }
	 ruleBlockSMC
{ after(grammarAccess.getBlockSMCRule()); } 
	 EOF 
;

// Rule BlockSMC
ruleBlockSMC 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockSMCAccess().getGroup()); }
		(rule__BlockSMC__Group__0)
		{ after(grammarAccess.getBlockSMCAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMainSMC
entryRuleMainSMC
:
{ before(grammarAccess.getMainSMCRule()); }
	 ruleMainSMC
{ after(grammarAccess.getMainSMCRule()); } 
	 EOF 
;

// Rule MainSMC
ruleMainSMC 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMainSMCAccess().getGroup()); }
		(rule__MainSMC__Group__0)
		{ after(grammarAccess.getMainSMCAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getAlternatives()); }
		(rule__Command__Alternatives)
		{ after(grammarAccess.getCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInvocationVoid
entryRuleInvocationVoid
:
{ before(grammarAccess.getInvocationVoidRule()); }
	 ruleInvocationVoid
{ after(grammarAccess.getInvocationVoidRule()); } 
	 EOF 
;

// Rule InvocationVoid
ruleInvocationVoid 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInvocationVoidAccess().getGroup()); }
		(rule__InvocationVoid__Group__0)
		{ after(grammarAccess.getInvocationVoidAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlock
entryRuleBlock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getGroup()); }
		(rule__Block__Group__0)
		{ after(grammarAccess.getBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrint
entryRulePrint
:
{ before(grammarAccess.getPrintRule()); }
	 rulePrint
{ after(grammarAccess.getPrintRule()); } 
	 EOF 
;

// Rule Print
rulePrint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintAccess().getGroup()); }
		(rule__Print__Group__0)
		{ after(grammarAccess.getPrintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhile
entryRuleWhile
:
{ before(grammarAccess.getWhileRule()); }
	 ruleWhile
{ after(grammarAccess.getWhileRule()); } 
	 EOF 
;

// Rule While
ruleWhile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileAccess().getGroup()); }
		(rule__While__Group__0)
		{ after(grammarAccess.getWhileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfThenElse
entryRuleIfThenElse
:
{ before(grammarAccess.getIfThenElseRule()); }
	 ruleIfThenElse
{ after(grammarAccess.getIfThenElseRule()); } 
	 EOF 
;

// Rule IfThenElse
ruleIfThenElse 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfThenElseAccess().getGroup()); }
		(rule__IfThenElse__Group__0)
		{ after(grammarAccess.getIfThenElseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableDecl
entryRuleVariableDecl
:
{ before(grammarAccess.getVariableDeclRule()); }
	 ruleVariableDecl
{ after(grammarAccess.getVariableDeclRule()); } 
	 EOF 
;

// Rule VariableDecl
ruleVariableDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableDeclAccess().getGroup()); }
		(rule__VariableDecl__Group__0)
		{ after(grammarAccess.getVariableDeclAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableAssignment
entryRuleVariableAssignment
:
{ before(grammarAccess.getVariableAssignmentRule()); }
	 ruleVariableAssignment
{ after(grammarAccess.getVariableAssignmentRule()); } 
	 EOF 
;

// Rule VariableAssignment
ruleVariableAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAssignmentAccess().getGroup()); }
		(rule__VariableAssignment__Group__0)
		{ after(grammarAccess.getVariableAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getOrParserRuleCall()); }
		ruleOr
		{ after(grammarAccess.getExpressionAccess().getOrParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOr
entryRuleOr
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrAccess().getGroup()); }
		(rule__Or__Group__0)
		{ after(grammarAccess.getOrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnd
entryRuleAnd
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndAccess().getGroup()); }
		(rule__And__Group__0)
		{ after(grammarAccess.getAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEquality
entryRuleEquality
:
{ before(grammarAccess.getEqualityRule()); }
	 ruleEquality
{ after(grammarAccess.getEqualityRule()); } 
	 EOF 
;

// Rule Equality
ruleEquality 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualityAccess().getGroup()); }
		(rule__Equality__Group__0)
		{ after(grammarAccess.getEqualityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparison
entryRuleComparison
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonAccess().getGroup()); }
		(rule__Comparison__Group__0)
		{ after(grammarAccess.getComparisonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlusOrMinus
entryRulePlusOrMinus
:
{ before(grammarAccess.getPlusOrMinusRule()); }
	 rulePlusOrMinus
{ after(grammarAccess.getPlusOrMinusRule()); } 
	 EOF 
;

// Rule PlusOrMinus
rulePlusOrMinus 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getGroup()); }
		(rule__PlusOrMinus__Group__0)
		{ after(grammarAccess.getPlusOrMinusAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMulOrDiv
entryRuleMulOrDiv
:
{ before(grammarAccess.getMulOrDivRule()); }
	 ruleMulOrDiv
{ after(grammarAccess.getMulOrDivRule()); } 
	 EOF 
;

// Rule MulOrDiv
ruleMulOrDiv 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMulOrDivAccess().getGroup()); }
		(rule__MulOrDiv__Group__0)
		{ after(grammarAccess.getMulOrDivAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtomic
entryRuleAtomic
:
{ before(grammarAccess.getAtomicRule()); }
	 ruleAtomic
{ after(grammarAccess.getAtomicRule()); } 
	 EOF 
;

// Rule Atomic
ruleAtomic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomicAccess().getAlternatives()); }
		(rule__Atomic__Alternatives)
		{ after(grammarAccess.getAtomicAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleList
entryRuleList
:
{ before(grammarAccess.getListRule()); }
	 ruleList
{ after(grammarAccess.getListRule()); } 
	 EOF 
;

// Rule List
ruleList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListAccess().getGroup()); }
		(rule__List__Group__0)
		{ after(grammarAccess.getListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInvocation
entryRuleInvocation
:
{ before(grammarAccess.getInvocationRule()); }
	 ruleInvocation
{ after(grammarAccess.getInvocationRule()); } 
	 EOF 
;

// Rule Invocation
ruleInvocation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInvocationAccess().getGroup()); }
		(rule__Invocation__Group__0)
		{ after(grammarAccess.getInvocationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule BlockType
ruleBlockType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockTypeAccess().getAlternatives()); }
		(rule__BlockType__Alternatives)
		{ after(grammarAccess.getBlockTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule SecType
ruleSecType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSecTypeAccess().getAlternatives()); }
		(rule__SecType__Alternatives)
		{ after(grammarAccess.getSecTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule BasicType
ruleBasicType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasicTypeAccess().getAlternatives()); }
		(rule__BasicType__Alternatives)
		{ after(grammarAccess.getBasicTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getBlockParserRuleCall_0()); }
		ruleBlock
		{ after(grammarAccess.getCommandAccess().getBlockParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getVariableDeclParserRuleCall_1()); }
		ruleVariableDecl
		{ after(grammarAccess.getCommandAccess().getVariableDeclParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getVariableAssignmentParserRuleCall_2()); }
		ruleVariableAssignment
		{ after(grammarAccess.getCommandAccess().getVariableAssignmentParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getIfThenElseParserRuleCall_3()); }
		ruleIfThenElse
		{ after(grammarAccess.getCommandAccess().getIfThenElseParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getWhileParserRuleCall_4()); }
		ruleWhile
		{ after(grammarAccess.getCommandAccess().getWhileParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getPrintParserRuleCall_5()); }
		rulePrint
		{ after(grammarAccess.getCommandAccess().getPrintParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getInvocationVoidParserRuleCall_6()); }
		ruleInvocationVoid
		{ after(grammarAccess.getCommandAccess().getInvocationVoidParserRuleCall_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0()); }
		'=='
		{ after(grammarAccess.getEqualityAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEqualityAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1()); }
		'!='
		{ after(grammarAccess.getEqualityAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0()); }
		'>='
		{ after(grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1()); }
		'<='
		{ after(grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_2()); }
		'>'
		{ after(grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_1_0_3()); }
		'<'
		{ after(grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getOpPlusSignKeyword_1_1_0_0()); }
		'+'
		{ after(grammarAccess.getPlusOrMinusAccess().getOpPlusSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getOpHyphenMinusKeyword_1_1_0_1()); }
		'-'
		{ after(grammarAccess.getPlusOrMinusAccess().getOpHyphenMinusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulOrDivAccess().getOpAsteriskKeyword_1_1_0_0()); }
		'*'
		{ after(grammarAccess.getMulOrDivAccess().getOpAsteriskKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMulOrDivAccess().getOpSolidusKeyword_1_1_0_1()); }
		'/'
		{ after(grammarAccess.getMulOrDivAccess().getOpSolidusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_0()); }
		(rule__Primary__Group_0__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_1()); }
		(rule__Primary__Group_1__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_2()); }
		ruleAtomic
		{ after(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_0()); }
		(rule__Atomic__Group_0__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_1()); }
		(rule__Atomic__Group_1__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_2()); }
		(rule__Atomic__Group_2__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_3()); }
		(rule__Atomic__Group_3__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_4()); }
		(rule__Atomic__Group_4__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_4()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_5()); }
		(rule__Atomic__Group_5__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_5()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_6()); }
		(rule__Atomic__Group_6__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_6()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getListParserRuleCall_7()); }
		ruleList
		{ after(grammarAccess.getAtomicAccess().getListParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getInvocationParserRuleCall_8()); }
		ruleInvocation
		{ after(grammarAccess.getAtomicAccess().getInvocationParserRuleCall_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockTypeAccess().getINSERTEnumLiteralDeclaration_0()); }
		('insert_data')
		{ after(grammarAccess.getBlockTypeAccess().getINSERTEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getBlockTypeAccess().getCOMPEnumLiteralDeclaration_1()); }
		('math_computation')
		{ after(grammarAccess.getBlockTypeAccess().getCOMPEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getBlockTypeAccess().getSEARCHEnumLiteralDeclaration_2()); }
		('search')
		{ after(grammarAccess.getBlockTypeAccess().getSEARCHEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getBlockTypeAccess().getANONYMIZATIONEnumLiteralDeclaration_3()); }
		('anonymization')
		{ after(grammarAccess.getBlockTypeAccess().getANONYMIZATIONEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getBlockTypeAccess().getACCESSEnumLiteralDeclaration_4()); }
		('access_control')
		{ after(grammarAccess.getBlockTypeAccess().getACCESSEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getBlockTypeAccess().getPERMISSIONEnumLiteralDeclaration_5()); }
		('permission_release')
		{ after(grammarAccess.getBlockTypeAccess().getPERMISSIONEnumLiteralDeclaration_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SecType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSecTypeAccess().getPUBLICEnumLiteralDeclaration_0()); }
		('public')
		{ after(grammarAccess.getSecTypeAccess().getPUBLICEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getSecTypeAccess().getPRIVATEEnumLiteralDeclaration_1()); }
		('private')
		{ after(grammarAccess.getSecTypeAccess().getPRIVATEEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasicTypeAccess().getINTEnumLiteralDeclaration_0()); }
		('INT')
		{ after(grammarAccess.getBasicTypeAccess().getINTEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getDOUBLEEnumLiteralDeclaration_1()); }
		('DOUBLE')
		{ after(grammarAccess.getBasicTypeAccess().getDOUBLEEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getBOOLEANEnumLiteralDeclaration_2()); }
		('BOOLEAN')
		{ after(grammarAccess.getBasicTypeAccess().getBOOLEANEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getSTRINGEnumLiteralDeclaration_3()); }
		('STRING')
		{ after(grammarAccess.getBasicTypeAccess().getSTRINGEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockSMC__Group__0__Impl
	rule__BlockSMC__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockSMCAccess().getBlockKeyword_0()); }
	'block'
	{ after(grammarAccess.getBlockSMCAccess().getBlockKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockSMC__Group__1__Impl
	rule__BlockSMC__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockSMCAccess().getTypeAssignment_1()); }
	(rule__BlockSMC__TypeAssignment_1)
	{ after(grammarAccess.getBlockSMCAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockSMC__Group__2__Impl
	rule__BlockSMC__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockSMCAccess().getNameAssignment_2()); }
	(rule__BlockSMC__NameAssignment_2)
	{ after(grammarAccess.getBlockSMCAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockSMC__Group__3__Impl
	rule__BlockSMC__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockSMCAccess().getEqualsSignKeyword_3()); }
	'='
	{ after(grammarAccess.getBlockSMCAccess().getEqualsSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockSMC__Group__4__Impl
	rule__BlockSMC__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockSMCAccess().getNewKeyword_4()); }
	'new'
	{ after(grammarAccess.getBlockSMCAccess().getNewKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockSMC__Group__5__Impl
	rule__BlockSMC__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockSMCAccess().getLeftParenthesisKeyword_5()); }
	'('
	{ after(grammarAccess.getBlockSMCAccess().getLeftParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockSMC__Group__6__Impl
	rule__BlockSMC__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockSMCAccess().getGroup_6()); }
	(rule__BlockSMC__Group_6__0)?
	{ after(grammarAccess.getBlockSMCAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockSMC__Group__7__Impl
	rule__BlockSMC__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockSMCAccess().getRightParenthesisKeyword_7()); }
	')'
	{ after(grammarAccess.getBlockSMCAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockSMC__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockSMCAccess().getSemicolonKeyword_8()); }
	';'
	{ after(grammarAccess.getBlockSMCAccess().getSemicolonKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BlockSMC__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockSMC__Group_6__0__Impl
	rule__BlockSMC__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockSMCAccess().getParametersAssignment_6_0()); }
	(rule__BlockSMC__ParametersAssignment_6_0)
	{ after(grammarAccess.getBlockSMCAccess().getParametersAssignment_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockSMC__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockSMCAccess().getGroup_6_1()); }
	(rule__BlockSMC__Group_6_1__0)*
	{ after(grammarAccess.getBlockSMCAccess().getGroup_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BlockSMC__Group_6_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockSMC__Group_6_1__0__Impl
	rule__BlockSMC__Group_6_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__Group_6_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockSMCAccess().getCommaKeyword_6_1_0()); }
	','
	{ after(grammarAccess.getBlockSMCAccess().getCommaKeyword_6_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__Group_6_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockSMC__Group_6_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__Group_6_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockSMCAccess().getParametersAssignment_6_1_1()); }
	(rule__BlockSMC__ParametersAssignment_6_1_1)
	{ after(grammarAccess.getBlockSMCAccess().getParametersAssignment_6_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MainSMC__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainSMC__Group__0__Impl
	rule__MainSMC__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MainSMC__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainSMCAccess().getMainKeyword_0()); }
	'main'
	{ after(grammarAccess.getMainSMCAccess().getMainKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainSMC__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainSMC__Group__1__Impl
	rule__MainSMC__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MainSMC__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainSMCAccess().getMainSMCAction_1()); }
	()
	{ after(grammarAccess.getMainSMCAccess().getMainSMCAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainSMC__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainSMC__Group__2__Impl
	rule__MainSMC__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MainSMC__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainSMCAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getMainSMCAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainSMC__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainSMC__Group__3__Impl
	rule__MainSMC__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MainSMC__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainSMCAccess().getCommandsAssignment_3()); }
	(rule__MainSMC__CommandsAssignment_3)*
	{ after(grammarAccess.getMainSMCAccess().getCommandsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainSMC__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainSMC__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MainSMC__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainSMCAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getMainSMCAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InvocationVoid__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvocationVoid__Group__0__Impl
	rule__InvocationVoid__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InvocationVoid__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvocationVoidAccess().getCallAssignment_0()); }
	(rule__InvocationVoid__CallAssignment_0)
	{ after(grammarAccess.getInvocationVoidAccess().getCallAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvocationVoid__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InvocationVoid__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InvocationVoid__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvocationVoidAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getInvocationVoidAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getBlockAction_0()); }
	()
	{ after(grammarAccess.getBlockAccess().getBlockAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__2__Impl
	rule__Block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getCommandsAssignment_2()); }
	(rule__Block__CommandsAssignment_2)*
	{ after(grammarAccess.getBlockAccess().getCommandsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Print__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__0__Impl
	rule__Print__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getPrintKeyword_0()); }
	'print'
	{ after(grammarAccess.getPrintAccess().getPrintKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__1__Impl
	rule__Print__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getPrintAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__2__Impl
	rule__Print__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getValueAssignment_2()); }
	(rule__Print__ValueAssignment_2)
	{ after(grammarAccess.getPrintAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__3__Impl
	rule__Print__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getPrintAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getSemicolonKeyword_4()); }
	';'
	{ after(grammarAccess.getPrintAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__0__Impl
	rule__While__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
	'while'
	{ after(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__1__Impl
	rule__While__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getWhileAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__2__Impl
	rule__While__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getConditionAssignment_2()); }
	(rule__While__ConditionAssignment_2)
	{ after(grammarAccess.getWhileAccess().getConditionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__3__Impl
	rule__While__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getWhileAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getBodyAssignment_4()); }
	(rule__While__BodyAssignment_4)
	{ after(grammarAccess.getWhileAccess().getBodyAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfThenElse__Group__0__Impl
	rule__IfThenElse__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfThenElseAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfThenElseAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfThenElse__Group__1__Impl
	rule__IfThenElse__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfThenElseAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getIfThenElseAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfThenElse__Group__2__Impl
	rule__IfThenElse__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfThenElseAccess().getConditionAssignment_2()); }
	(rule__IfThenElse__ConditionAssignment_2)
	{ after(grammarAccess.getIfThenElseAccess().getConditionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfThenElse__Group__3__Impl
	rule__IfThenElse__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfThenElseAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getIfThenElseAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfThenElse__Group__4__Impl
	rule__IfThenElse__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfThenElseAccess().getThenBrachAssignment_4()); }
	(rule__IfThenElse__ThenBrachAssignment_4)
	{ after(grammarAccess.getIfThenElseAccess().getThenBrachAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfThenElse__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfThenElseAccess().getGroup_5()); }
	(rule__IfThenElse__Group_5__0)?
	{ after(grammarAccess.getIfThenElseAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfThenElse__Group_5__0__Impl
	rule__IfThenElse__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfThenElseAccess().getElseKeyword_5_0()); }
	('else')
	{ after(grammarAccess.getIfThenElseAccess().getElseKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfThenElse__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfThenElseAccess().getElseBranchAssignment_5_1()); }
	(rule__IfThenElse__ElseBranchAssignment_5_1)
	{ after(grammarAccess.getIfThenElseAccess().getElseBranchAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDecl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDecl__Group__0__Impl
	rule__VariableDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclAccess().getVarKeyword_0()); }
	'var'
	{ after(grammarAccess.getVariableDeclAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDecl__Group__1__Impl
	rule__VariableDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclAccess().getVisibilityAssignment_1()); }
	(rule__VariableDecl__VisibilityAssignment_1)
	{ after(grammarAccess.getVariableDeclAccess().getVisibilityAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDecl__Group__2__Impl
	rule__VariableDecl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclAccess().getTypeAssignment_2()); }
	(rule__VariableDecl__TypeAssignment_2)
	{ after(grammarAccess.getVariableDeclAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDecl__Group__3__Impl
	rule__VariableDecl__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclAccess().getArrayAssignment_3()); }
	(rule__VariableDecl__ArrayAssignment_3)?
	{ after(grammarAccess.getVariableDeclAccess().getArrayAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDecl__Group__4__Impl
	rule__VariableDecl__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclAccess().getNameAssignment_4()); }
	(rule__VariableDecl__NameAssignment_4)
	{ after(grammarAccess.getVariableDeclAccess().getNameAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDecl__Group__5__Impl
	rule__VariableDecl__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclAccess().getGroup_5()); }
	(rule__VariableDecl__Group_5__0)?
	{ after(grammarAccess.getVariableDeclAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDecl__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclAccess().getSemicolonKeyword_6()); }
	';'
	{ after(grammarAccess.getVariableDeclAccess().getSemicolonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDecl__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDecl__Group_5__0__Impl
	rule__VariableDecl__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclAccess().getEqualsSignKeyword_5_0()); }
	'='
	{ after(grammarAccess.getVariableDeclAccess().getEqualsSignKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDecl__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclAccess().getExpAssignment_5_1()); }
	(rule__VariableDecl__ExpAssignment_5_1)
	{ after(grammarAccess.getVariableDeclAccess().getExpAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableAssignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableAssignment__Group__0__Impl
	rule__VariableAssignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAssignmentAccess().getVarAssignment_0()); }
	(rule__VariableAssignment__VarAssignment_0)
	{ after(grammarAccess.getVariableAssignmentAccess().getVarAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableAssignment__Group__1__Impl
	rule__VariableAssignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAssignmentAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getVariableAssignmentAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableAssignment__Group__2__Impl
	rule__VariableAssignment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAssignmentAccess().getExpAssignment_2()); }
	(rule__VariableAssignment__ExpAssignment_2)
	{ after(grammarAccess.getVariableAssignmentAccess().getExpAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableAssignment__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAssignmentAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getVariableAssignmentAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
	ruleAnd
	{ after(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getGroup_1()); }
	(rule__Or__Group_1__0)*
	{ after(grammarAccess.getOrAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__0__Impl
	rule__Or__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__1__Impl
	rule__Or__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1()); }
	'||'
	{ after(grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
	(rule__Or__RightAssignment_1_2)
	{ after(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getEqualityParserRuleCall_0()); }
	ruleEquality
	{ after(grammarAccess.getAndAccess().getEqualityParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getGroup_1()); }
	(rule__And__Group_1__0)*
	{ after(grammarAccess.getAndAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__0__Impl
	rule__And__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__1__Impl
	rule__And__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1()); }
	'&&'
	{ after(grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
	(rule__And__RightAssignment_1_2)
	{ after(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group__0__Impl
	rule__Equality__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0()); }
	ruleComparison
	{ after(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getGroup_1()); }
	(rule__Equality__Group_1__0)*
	{ after(grammarAccess.getEqualityAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group_1__0__Impl
	rule__Equality__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getEqualityLeftAction_1_0()); }
	()
	{ after(grammarAccess.getEqualityAccess().getEqualityLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group_1__1__Impl
	rule__Equality__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getOpAssignment_1_1()); }
	(rule__Equality__OpAssignment_1_1)
	{ after(grammarAccess.getEqualityAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Equality__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityAccess().getRightAssignment_1_2()); }
	(rule__Equality__RightAssignment_1_2)
	{ after(grammarAccess.getEqualityAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getPlusOrMinusParserRuleCall_0()); }
	rulePlusOrMinus
	{ after(grammarAccess.getComparisonAccess().getPlusOrMinusParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGroup_1()); }
	(rule__Comparison__Group_1__0)*
	{ after(grammarAccess.getComparisonAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__0__Impl
	rule__Comparison__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0()); }
	()
	{ after(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__1__Impl
	rule__Comparison__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getOpAssignment_1_1()); }
	(rule__Comparison__OpAssignment_1_1)
	{ after(grammarAccess.getComparisonAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getRightAssignment_1_2()); }
	(rule__Comparison__RightAssignment_1_2)
	{ after(grammarAccess.getComparisonAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOrMinus__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group__0__Impl
	rule__PlusOrMinus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getMulOrDivParserRuleCall_0()); }
	ruleMulOrDiv
	{ after(grammarAccess.getPlusOrMinusAccess().getMulOrDivParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getGroup_1()); }
	(rule__PlusOrMinus__Group_1__0)*
	{ after(grammarAccess.getPlusOrMinusAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOrMinus__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1__0__Impl
	rule__PlusOrMinus__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getPlusOrMinusLeftAction_1_0()); }
	()
	{ after(grammarAccess.getPlusOrMinusAccess().getPlusOrMinusLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1__1__Impl
	rule__PlusOrMinus__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getOpAssignment_1_1()); }
	(rule__PlusOrMinus__OpAssignment_1_1)
	{ after(grammarAccess.getPlusOrMinusAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusOrMinus__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_2()); }
	(rule__PlusOrMinus__RightAssignment_1_2)
	{ after(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MulOrDiv__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDiv__Group__0__Impl
	rule__MulOrDiv__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getMulOrDivAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDiv__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivAccess().getGroup_1()); }
	(rule__MulOrDiv__Group_1__0)*
	{ after(grammarAccess.getMulOrDivAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MulOrDiv__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDiv__Group_1__0__Impl
	rule__MulOrDiv__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivAccess().getMulOrDivLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMulOrDivAccess().getMulOrDivLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDiv__Group_1__1__Impl
	rule__MulOrDiv__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivAccess().getOpAssignment_1_1()); }
	(rule__MulOrDiv__OpAssignment_1_1)
	{ after(grammarAccess.getMulOrDivAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MulOrDiv__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMulOrDivAccess().getRightAssignment_1_2()); }
	(rule__MulOrDiv__RightAssignment_1_2)
	{ after(grammarAccess.getMulOrDivAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__0__Impl
	rule__Primary__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__1__Impl
	rule__Primary__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_1()); }
	ruleExpression
	{ after(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__0__Impl
	rule__Primary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getNotAction_1_0()); }
	()
	{ after(grammarAccess.getPrimaryAccess().getNotAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__1__Impl
	rule__Primary__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_1_1()); }
	'!'
	{ after(grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2()); }
	(rule__Primary__ExpressionAssignment_1_2)
	{ after(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_0__0__Impl
	rule__Atomic__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getIntLiteralAction_0_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getIntLiteralAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getValueAssignment_0_1()); }
	(rule__Atomic__ValueAssignment_0_1)
	{ after(grammarAccess.getAtomicAccess().getValueAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_1__0__Impl
	rule__Atomic__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getDoubleLiteralAction_1_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getDoubleLiteralAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getValueAssignment_1_1()); }
	(rule__Atomic__ValueAssignment_1_1)
	{ after(grammarAccess.getAtomicAccess().getValueAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_2__0__Impl
	rule__Atomic__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getBooleanLiteralAction_2_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getBooleanLiteralAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getValueAssignment_2_1()); }
	(rule__Atomic__ValueAssignment_2_1)
	{ after(grammarAccess.getAtomicAccess().getValueAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_3__0__Impl
	rule__Atomic__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getStringLiteralAction_3_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getStringLiteralAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getValueAssignment_3_1()); }
	(rule__Atomic__ValueAssignment_3_1)
	{ after(grammarAccess.getAtomicAccess().getValueAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_4__0__Impl
	rule__Atomic__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getDateLiteralAction_4_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getDateLiteralAction_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getValueAssignment_4_1()); }
	(rule__Atomic__ValueAssignment_4_1)
	{ after(grammarAccess.getAtomicAccess().getValueAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_5__0__Impl
	rule__Atomic__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getTimeLiteralAction_5_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getTimeLiteralAction_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getValueAssignment_5_1()); }
	(rule__Atomic__ValueAssignment_5_1)
	{ after(grammarAccess.getAtomicAccess().getValueAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_6__0__Impl
	rule__Atomic__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getVariableRefAction_6_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getVariableRefAction_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getVariableAssignment_6_1()); }
	(rule__Atomic__VariableAssignment_6_1)
	{ after(grammarAccess.getAtomicAccess().getVariableAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__0__Impl
	rule__List__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getListKeyword_0()); }
	'list('
	{ after(grammarAccess.getListAccess().getListKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__1__Impl
	rule__List__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getGroup_1()); }
	(rule__List__Group_1__0)
	{ after(grammarAccess.getListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getListAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group_1__0__Impl
	rule__List__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getArgsAssignment_1_0()); }
	(rule__List__ArgsAssignment_1_0)
	{ after(grammarAccess.getListAccess().getArgsAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getGroup_1_1()); }
	(rule__List__Group_1_1__0)*
	{ after(grammarAccess.getListAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group_1_1__0__Impl
	rule__List__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getCommaKeyword_1_1_0()); }
	','
	{ after(grammarAccess.getListAccess().getCommaKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getArgsAssignment_1_1_1()); }
	(rule__List__ArgsAssignment_1_1_1)
	{ after(grammarAccess.getListAccess().getArgsAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Invocation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Invocation__Group__0__Impl
	rule__Invocation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Invocation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvocationAccess().getBlockNameAssignment_0()); }
	(rule__Invocation__BlockNameAssignment_0)
	{ after(grammarAccess.getInvocationAccess().getBlockNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Invocation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Invocation__Group__1__Impl
	rule__Invocation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Invocation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvocationAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getInvocationAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Invocation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Invocation__Group__2__Impl
	rule__Invocation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Invocation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvocationAccess().getFunctionAssignment_2()); }
	(rule__Invocation__FunctionAssignment_2)
	{ after(grammarAccess.getInvocationAccess().getFunctionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Invocation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Invocation__Group__3__Impl
	rule__Invocation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Invocation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvocationAccess().getLeftParenthesisKeyword_3()); }
	'('
	{ after(grammarAccess.getInvocationAccess().getLeftParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Invocation__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Invocation__Group__4__Impl
	rule__Invocation__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Invocation__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvocationAccess().getGroup_4()); }
	(rule__Invocation__Group_4__0)?
	{ after(grammarAccess.getInvocationAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Invocation__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Invocation__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Invocation__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvocationAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getInvocationAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Invocation__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Invocation__Group_4__0__Impl
	rule__Invocation__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Invocation__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvocationAccess().getArgsAssignment_4_0()); }
	(rule__Invocation__ArgsAssignment_4_0)
	{ after(grammarAccess.getInvocationAccess().getArgsAssignment_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Invocation__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Invocation__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Invocation__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvocationAccess().getGroup_4_1()); }
	(rule__Invocation__Group_4_1__0)*
	{ after(grammarAccess.getInvocationAccess().getGroup_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Invocation__Group_4_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Invocation__Group_4_1__0__Impl
	rule__Invocation__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Invocation__Group_4_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvocationAccess().getCommaKeyword_4_1_0()); }
	','
	{ after(grammarAccess.getInvocationAccess().getCommaKeyword_4_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Invocation__Group_4_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Invocation__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Invocation__Group_4_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInvocationAccess().getArgsAssignment_4_1_1()); }
	(rule__Invocation__ArgsAssignment_4_1_1)
	{ after(grammarAccess.getInvocationAccess().getArgsAssignment_4_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Smc__UnorderedGroup
	@init {
		int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getSmcAccess().getUnorderedGroup());
	}
:
	rule__Smc__UnorderedGroup__0
	?
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getSmcAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}

rule__Smc__UnorderedGroup__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
	}
:
		(
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getSmcAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getSmcAccess().getUnorderedGroup(), 0);
				}
				{
					selected = true;
				}
				(
					(
						{ before(grammarAccess.getSmcAccess().getBlocksAssignment_0()); }
						(rule__Smc__BlocksAssignment_0)
						{ after(grammarAccess.getSmcAccess().getBlocksAssignment_0()); }
					)
					(
						{ before(grammarAccess.getSmcAccess().getBlocksAssignment_0()); }
						((rule__Smc__BlocksAssignment_0)=>rule__Smc__BlocksAssignment_0)*
						{ after(grammarAccess.getSmcAccess().getBlocksAssignment_0()); }
					)
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getSmcAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getSmcAccess().getUnorderedGroup(), 1);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getSmcAccess().getMainAssignment_1()); }
					(rule__Smc__MainAssignment_1)
					{ after(grammarAccess.getSmcAccess().getMainAssignment_1()); }
				)
			)
		)
		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getSmcAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}

rule__Smc__UnorderedGroup__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Smc__UnorderedGroup__Impl
	rule__Smc__UnorderedGroup__1?
;
finally {
	restoreStackSize(stackSize);
}

rule__Smc__UnorderedGroup__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Smc__UnorderedGroup__Impl
;
finally {
	restoreStackSize(stackSize);
}


rule__Smc__BlocksAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSmcAccess().getBlocksBlockSMCParserRuleCall_0_0()); }
		ruleBlockSMC
		{ after(grammarAccess.getSmcAccess().getBlocksBlockSMCParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Smc__MainAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSmcAccess().getMainMainSMCParserRuleCall_1_0()); }
		ruleMainSMC
		{ after(grammarAccess.getSmcAccess().getMainMainSMCParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockSMCAccess().getTypeBlockTypeEnumRuleCall_1_0()); }
		ruleBlockType
		{ after(grammarAccess.getBlockSMCAccess().getTypeBlockTypeEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockSMCAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getBlockSMCAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__ParametersAssignment_6_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockSMCAccess().getParametersExpressionParserRuleCall_6_0_0()); }
		ruleExpression
		{ after(grammarAccess.getBlockSMCAccess().getParametersExpressionParserRuleCall_6_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSMC__ParametersAssignment_6_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockSMCAccess().getParametersExpressionParserRuleCall_6_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getBlockSMCAccess().getParametersExpressionParserRuleCall_6_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainSMC__CommandsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainSMCAccess().getCommandsCommandParserRuleCall_3_0()); }
		ruleCommand
		{ after(grammarAccess.getMainSMCAccess().getCommandsCommandParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InvocationVoid__CallAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInvocationVoidAccess().getCallInvocationParserRuleCall_0_0()); }
		ruleInvocation
		{ after(grammarAccess.getInvocationVoidAccess().getCallInvocationParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__CommandsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getCommandsCommandParserRuleCall_2_0()); }
		ruleCommand
		{ after(grammarAccess.getBlockAccess().getCommandsCommandParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintAccess().getValueExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getPrintAccess().getValueExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__ConditionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileAccess().getConditionExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getWhileAccess().getConditionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__BodyAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileAccess().getBodyCommandParserRuleCall_4_0()); }
		ruleCommand
		{ after(grammarAccess.getWhileAccess().getBodyCommandParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__ConditionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfThenElseAccess().getConditionExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getIfThenElseAccess().getConditionExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__ThenBrachAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfThenElseAccess().getThenBrachCommandParserRuleCall_4_0()); }
		ruleCommand
		{ after(grammarAccess.getIfThenElseAccess().getThenBrachCommandParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__ElseBranchAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfThenElseAccess().getElseBranchCommandParserRuleCall_5_1_0()); }
		ruleCommand
		{ after(grammarAccess.getIfThenElseAccess().getElseBranchCommandParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__VisibilityAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclAccess().getVisibilitySecTypeEnumRuleCall_1_0()); }
		ruleSecType
		{ after(grammarAccess.getVariableDeclAccess().getVisibilitySecTypeEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclAccess().getTypeBasicTypeEnumRuleCall_2_0()); }
		ruleBasicType
		{ after(grammarAccess.getVariableDeclAccess().getTypeBasicTypeEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__ArrayAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_3_0()); }
		(
			{ before(grammarAccess.getVariableDeclAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_3_0()); }
			'[]'
			{ after(grammarAccess.getVariableDeclAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_3_0()); }
		)
		{ after(grammarAccess.getVariableDeclAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__NameAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclAccess().getNameIDTerminalRuleCall_4_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableDeclAccess().getNameIDTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__ExpAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclAccess().getExpExpressionParserRuleCall_5_1_0()); }
		ruleExpression
		{ after(grammarAccess.getVariableDeclAccess().getExpExpressionParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__VarAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAssignmentAccess().getVarVariableDeclCrossReference_0_0()); }
		(
			{ before(grammarAccess.getVariableAssignmentAccess().getVarVariableDeclIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getVariableAssignmentAccess().getVarVariableDeclIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getVariableAssignmentAccess().getVarVariableDeclCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignment__ExpAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAssignmentAccess().getExpExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getVariableAssignmentAccess().getExpExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
		ruleAnd
		{ after(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0()); }
		ruleEquality
		{ after(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_0()); }
		(rule__Equality__OpAlternatives_1_1_0)
		{ after(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_2_0()); }
		ruleComparison
		{ after(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0()); }
		(rule__Comparison__OpAlternatives_1_1_0)
		{ after(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getRightPlusOrMinusParserRuleCall_1_2_0()); }
		rulePlusOrMinus
		{ after(grammarAccess.getComparisonAccess().getRightPlusOrMinusParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getOpAlternatives_1_1_0()); }
		(rule__PlusOrMinus__OpAlternatives_1_1_0)
		{ after(grammarAccess.getPlusOrMinusAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusOrMinusAccess().getRightMulOrDivParserRuleCall_1_2_0()); }
		ruleMulOrDiv
		{ after(grammarAccess.getPlusOrMinusAccess().getRightMulOrDivParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulOrDivAccess().getOpAlternatives_1_1_0()); }
		(rule__MulOrDiv__OpAlternatives_1_1_0)
		{ after(grammarAccess.getMulOrDivAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMulOrDivAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getMulOrDivAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ExpressionAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_0_1_0()); }
		RULE_INT
		{ after(grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getValueREALTerminalRuleCall_1_1_0()); }
		RULE_REAL
		{ after(grammarAccess.getAtomicAccess().getValueREALTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getValueBOOLEANTerminalRuleCall_2_1_0()); }
		RULE_BOOLEAN
		{ after(grammarAccess.getAtomicAccess().getValueBOOLEANTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getValueSTRINGTerminalRuleCall_3_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getAtomicAccess().getValueSTRINGTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getValueDATETerminalRuleCall_4_1_0()); }
		RULE_DATE
		{ after(grammarAccess.getAtomicAccess().getValueDATETerminalRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getValueTIMETerminalRuleCall_5_1_0()); }
		RULE_TIME
		{ after(grammarAccess.getAtomicAccess().getValueTIMETerminalRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__VariableAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getVariableVariableDeclCrossReference_6_1_0()); }
		(
			{ before(grammarAccess.getAtomicAccess().getVariableVariableDeclIDTerminalRuleCall_6_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAtomicAccess().getVariableVariableDeclIDTerminalRuleCall_6_1_0_1()); }
		)
		{ after(grammarAccess.getAtomicAccess().getVariableVariableDeclCrossReference_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__ArgsAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getArgsAtomicParserRuleCall_1_0_0()); }
		ruleAtomic
		{ after(grammarAccess.getListAccess().getArgsAtomicParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__ArgsAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getArgsAtomicParserRuleCall_1_1_1_0()); }
		ruleAtomic
		{ after(grammarAccess.getListAccess().getArgsAtomicParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Invocation__BlockNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInvocationAccess().getBlockNameBlockSMCCrossReference_0_0()); }
		(
			{ before(grammarAccess.getInvocationAccess().getBlockNameBlockSMCIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getInvocationAccess().getBlockNameBlockSMCIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getInvocationAccess().getBlockNameBlockSMCCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Invocation__FunctionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInvocationAccess().getFunctionIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getInvocationAccess().getFunctionIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Invocation__ArgsAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInvocationAccess().getArgsExpressionParserRuleCall_4_0_0()); }
		ruleExpression
		{ after(grammarAccess.getInvocationAccess().getArgsExpressionParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Invocation__ArgsAssignment_4_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInvocationAccess().getArgsExpressionParserRuleCall_4_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getInvocationAccess().getArgsExpressionParserRuleCall_4_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_BOOLEAN : ('true'|'false');

RULE_INT : ('0'..'9')+;

RULE_DATE : RULE_INT '/' RULE_INT '/' RULE_INT;

RULE_TIME : RULE_INT ':' RULE_INT ':' RULE_INT;

RULE_REAL : ('+'|'-')? ('0'..'9')* ('.' ('0'..'9')+)?;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"'|'/')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\''|'/')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
