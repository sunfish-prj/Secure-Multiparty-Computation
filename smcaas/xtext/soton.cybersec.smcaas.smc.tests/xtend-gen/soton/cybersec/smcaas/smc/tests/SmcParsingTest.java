/**
 * generated by Xtext 2.12.0
 */
package soton.cybersec.smcaas.smc.tests;

import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.util.IAcceptor;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.testing.CompilationTestHelper;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import soton.cybersec.smcaas.smc.smc.Smc;
import soton.cybersec.smcaas.smc.tests.SmcInjectorProvider;

@RunWith(XtextRunner.class)
@InjectWith(SmcInjectorProvider.class)
@SuppressWarnings("all")
public class SmcParsingTest {
  @Inject
  @Extension
  private ParseHelper<Smc> _parseHelper;
  
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  @Inject
  @Extension
  private CompilationTestHelper _compilationTestHelper;
  
  @Test
  public void testGen1() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("block insert_data B1 = new (\'UC3\');");
      _builder.newLine();
      _builder.append("block search B2 = new();");
      _builder.newLine();
      _builder.append("block access_control B3 = new(\'O\', \'S\', \'TS\');");
      _builder.newLine();
      _builder.append("block permission_release B4 = new();");
      _builder.newLine();
      _builder.newLine();
      _builder.append("main{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var private INT x;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var private INT y = (5 * 5) + 3;");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("x = 5;");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if(x == y){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("var private INT z = 5;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}else{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("var private INT w = 5;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("while((5 && 5) || (5 && 5)){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("var private INT g = 5;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if(!y){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("print(5);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var private INT l = list(5, 6, 7, x);");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("B4.ciao();");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(model));
      final IAcceptor<CompilationTestHelper.Result> _function = (CompilationTestHelper.Result it) -> {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("void main() {");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("string ds = \"DS1\";");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("string tbl = argument(\"UC3\");");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("tdbOpenConnection(ds);");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("if (tdbTableExists(ds, tbl)) {");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("print(\"Table `\" + tbl + \"` already exisis, deleting...\");");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("tdbTableDelete(ds, tbl);");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.append(" \t");
        _builder_1.append("pd_shared3p uint64 x;");
        _builder_1.newLine();
        _builder_1.append(" \t");
        _builder_1.append("pd_shared3p uint64 y = ((5) * (5)) + (3);");
        _builder_1.newLine();
        _builder_1.append(" \t");
        _builder_1.newLine();
        _builder_1.append(" \t");
        _builder_1.append("x = 5;");
        _builder_1.newLine();
        _builder_1.append(" \t");
        _builder_1.newLine();
        _builder_1.append(" \t");
        _builder_1.append("if((x) == (y)){");
        _builder_1.newLine();
        _builder_1.append(" \t\t");
        _builder_1.append("pd_shared3p uint64 z = 5;");
        _builder_1.newLine();
        _builder_1.append(" \t");
        _builder_1.append("}else{");
        _builder_1.newLine();
        _builder_1.append(" \t\t");
        _builder_1.append("pd_shared3p uint64 w = 5;");
        _builder_1.newLine();
        _builder_1.append(" \t");
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.append(" \t");
        _builder_1.newLine();
        _builder_1.append(" \t");
        _builder_1.append("while(((5) && (5)) || ((5) && (5))){");
        _builder_1.newLine();
        _builder_1.append(" \t\t");
        _builder_1.append("pd_shared3p uint64 g = 5;");
        _builder_1.newLine();
        _builder_1.append(" \t");
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.append(" \t");
        _builder_1.newLine();
        _builder_1.append(" \t");
        _builder_1.append("if(!(y)){");
        _builder_1.newLine();
        _builder_1.append(" \t\t");
        _builder_1.append("print(\"5\");");
        _builder_1.newLine();
        _builder_1.append(" \t");
        _builder_1.append("}");
        _builder_1.newLine();
        _builder_1.append(" \t");
        _builder_1.newLine();
        _builder_1.append(" \t");
        _builder_1.append("pd_shared3p uint64 l = {5, 6, 7, x};");
        _builder_1.newLine();
        _builder_1.append(" \t");
        _builder_1.newLine();
        _builder_1.append(" \t");
        _builder_1.append("B4.ciao();");
        _builder_1.newLine();
        _builder_1.append("}");
        _builder_1.newLine();
        Assert.assertEquals(_builder_1.toString().replaceAll("\\s", ""), 
          it.getSingleGeneratedCode().substring(it.getSingleGeneratedCode().indexOf("void main()")).replaceAll("\\s", ""));
      };
      this._compilationTestHelper.compile(model, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testGen2() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("block insert_data B1 = new (\'UC3\');");
      _builder.newLine();
      _builder.append("block search B2 = new();");
      _builder.newLine();
      _builder.append("block access_control B3 = new(\'O\', \'S\', \'TS\');");
      _builder.newLine();
      _builder.append("block permission_release B4 = new();");
      _builder.newLine();
      _builder.newLine();
      _builder.append("main{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var private STRING [] features_names = list(\'ROCU\', \'CYBER_CRIME\', \'LVL\');");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var private STRING [] values = list(\'cyber-crime-23\', \'cyber-crime-235\', ");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("\'cyber-crime-176\', \'cyber-crime-870\', \'cyber-crime-544\'");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("); ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var public STRING datasetName = B1.addDataset(features_names, values);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var private STRING [] levels = list(\'TS\', \'S\', \'S\', \'O\', \'TS\');");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("B1.addClearanceLvl(levels);");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("//search on \'UC3\', match will be a flag indicating if there is a match");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var private STRING keyword = \'cyber-crime-176\';");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var private BOOLEAN match = B2.find(B1.getDataset(), keyword);");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("var private STRING final_result;");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("//control on level-security between data and requester");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if(match == true){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("var private BOOLEAN ac_result;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("var private STRING mylvl = \'TS\';");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("ac_result = B3.checkPolicy(mylvl, B2.getResult());");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//check if is denied (i.e. requester_lvl < data_lvl)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if(ac_result == \'DENY\') {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("//being denied, ask to data owner to release ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("var private BOOLEAN flag = B4.askPermission(ac_result);");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("if(flag == true){");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("final_result = B4.grantPermission();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}else{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("final_result = B3.getData();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("//make result public");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("print(final_result);");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String model = _builder.toString();
      this._validationTestHelper.assertNoErrors(this._parseHelper.parse(model));
      final IAcceptor<CompilationTestHelper.Result> _function = (CompilationTestHelper.Result it) -> {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("void main() {");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.newLine();
        _builder_1.append(" \t");
        _builder_1.append("B4.ciao();");
        _builder_1.newLine();
        _builder_1.append("}");
        _builder_1.newLine();
        Assert.assertEquals(_builder_1.toString().replaceAll("\\s", ""), 
          it.getSingleGeneratedCode().substring(it.getSingleGeneratedCode().indexOf("void main()")).replaceAll("\\s", ""));
      };
      this._compilationTestHelper.compile(model, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
