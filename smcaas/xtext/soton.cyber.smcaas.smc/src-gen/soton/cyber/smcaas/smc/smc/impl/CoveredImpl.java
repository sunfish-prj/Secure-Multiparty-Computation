/**
 * generated by Xtext 2.12.0
 */
package soton.cyber.smcaas.smc.smc.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import soton.cyber.smcaas.smc.smc.Covered;
import soton.cyber.smcaas.smc.smc.SmcPackage;
import soton.cyber.smcaas.smc.smc.VariableDecl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Covered</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link soton.cyber.smcaas.smc.smc.impl.CoveredImpl#getMatch <em>Match</em>}</li>
 *   <li>{@link soton.cyber.smcaas.smc.smc.impl.CoveredImpl#getCovered <em>Covered</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CoveredImpl extends AccessControlImpl implements Covered
{
  /**
   * The cached value of the '{@link #getMatch() <em>Match</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMatch()
   * @generated
   * @ordered
   */
  protected VariableDecl match;

  /**
   * The cached value of the '{@link #getCovered() <em>Covered</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCovered()
   * @generated
   * @ordered
   */
  protected VariableDecl covered;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CoveredImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SmcPackage.Literals.COVERED;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableDecl getMatch()
  {
    if (match != null && match.eIsProxy())
    {
      InternalEObject oldMatch = (InternalEObject)match;
      match = (VariableDecl)eResolveProxy(oldMatch);
      if (match != oldMatch)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SmcPackage.COVERED__MATCH, oldMatch, match));
      }
    }
    return match;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableDecl basicGetMatch()
  {
    return match;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMatch(VariableDecl newMatch)
  {
    VariableDecl oldMatch = match;
    match = newMatch;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmcPackage.COVERED__MATCH, oldMatch, match));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableDecl getCovered()
  {
    if (covered != null && covered.eIsProxy())
    {
      InternalEObject oldCovered = (InternalEObject)covered;
      covered = (VariableDecl)eResolveProxy(oldCovered);
      if (covered != oldCovered)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SmcPackage.COVERED__COVERED, oldCovered, covered));
      }
    }
    return covered;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableDecl basicGetCovered()
  {
    return covered;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCovered(VariableDecl newCovered)
  {
    VariableDecl oldCovered = covered;
    covered = newCovered;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmcPackage.COVERED__COVERED, oldCovered, covered));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SmcPackage.COVERED__MATCH:
        if (resolve) return getMatch();
        return basicGetMatch();
      case SmcPackage.COVERED__COVERED:
        if (resolve) return getCovered();
        return basicGetCovered();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SmcPackage.COVERED__MATCH:
        setMatch((VariableDecl)newValue);
        return;
      case SmcPackage.COVERED__COVERED:
        setCovered((VariableDecl)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SmcPackage.COVERED__MATCH:
        setMatch((VariableDecl)null);
        return;
      case SmcPackage.COVERED__COVERED:
        setCovered((VariableDecl)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SmcPackage.COVERED__MATCH:
        return match != null;
      case SmcPackage.COVERED__COVERED:
        return covered != null;
    }
    return super.eIsSet(featureID);
  }

} //CoveredImpl
