/**
 * generated by Xtext 2.12.0
 */
package soton.cyber.smcaas.smc.smc.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import soton.cyber.smcaas.smc.smc.AccessControl;
import soton.cyber.smcaas.smc.smc.SmcPackage;
import soton.cyber.smcaas.smc.smc.VariableDecl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Access Control</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link soton.cyber.smcaas.smc.smc.impl.AccessControlImpl#getC_lvls <em>Clvls</em>}</li>
 *   <li>{@link soton.cyber.smcaas.smc.smc.impl.AccessControlImpl#getV_lvl <em>Vlvl</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AccessControlImpl extends FunctionsImpl implements AccessControl
{
  /**
   * The cached value of the '{@link #getC_lvls() <em>Clvls</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getC_lvls()
   * @generated
   * @ordered
   */
  protected VariableDecl c_lvls;

  /**
   * The cached value of the '{@link #getV_lvl() <em>Vlvl</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getV_lvl()
   * @generated
   * @ordered
   */
  protected VariableDecl v_lvl;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AccessControlImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SmcPackage.Literals.ACCESS_CONTROL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableDecl getC_lvls()
  {
    if (c_lvls != null && c_lvls.eIsProxy())
    {
      InternalEObject oldC_lvls = (InternalEObject)c_lvls;
      c_lvls = (VariableDecl)eResolveProxy(oldC_lvls);
      if (c_lvls != oldC_lvls)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SmcPackage.ACCESS_CONTROL__CLVLS, oldC_lvls, c_lvls));
      }
    }
    return c_lvls;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableDecl basicGetC_lvls()
  {
    return c_lvls;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setC_lvls(VariableDecl newC_lvls)
  {
    VariableDecl oldC_lvls = c_lvls;
    c_lvls = newC_lvls;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmcPackage.ACCESS_CONTROL__CLVLS, oldC_lvls, c_lvls));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableDecl getV_lvl()
  {
    if (v_lvl != null && v_lvl.eIsProxy())
    {
      InternalEObject oldV_lvl = (InternalEObject)v_lvl;
      v_lvl = (VariableDecl)eResolveProxy(oldV_lvl);
      if (v_lvl != oldV_lvl)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SmcPackage.ACCESS_CONTROL__VLVL, oldV_lvl, v_lvl));
      }
    }
    return v_lvl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableDecl basicGetV_lvl()
  {
    return v_lvl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setV_lvl(VariableDecl newV_lvl)
  {
    VariableDecl oldV_lvl = v_lvl;
    v_lvl = newV_lvl;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmcPackage.ACCESS_CONTROL__VLVL, oldV_lvl, v_lvl));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SmcPackage.ACCESS_CONTROL__CLVLS:
        if (resolve) return getC_lvls();
        return basicGetC_lvls();
      case SmcPackage.ACCESS_CONTROL__VLVL:
        if (resolve) return getV_lvl();
        return basicGetV_lvl();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SmcPackage.ACCESS_CONTROL__CLVLS:
        setC_lvls((VariableDecl)newValue);
        return;
      case SmcPackage.ACCESS_CONTROL__VLVL:
        setV_lvl((VariableDecl)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SmcPackage.ACCESS_CONTROL__CLVLS:
        setC_lvls((VariableDecl)null);
        return;
      case SmcPackage.ACCESS_CONTROL__VLVL:
        setV_lvl((VariableDecl)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SmcPackage.ACCESS_CONTROL__CLVLS:
        return c_lvls != null;
      case SmcPackage.ACCESS_CONTROL__VLVL:
        return v_lvl != null;
    }
    return super.eIsSet(featureID);
  }

} //AccessControlImpl
