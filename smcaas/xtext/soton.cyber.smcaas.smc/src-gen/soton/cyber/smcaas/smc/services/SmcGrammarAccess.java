/*
 * generated by Xtext 2.12.0
 */
package soton.cyber.smcaas.smc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SmcGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SmcElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Smc");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cBlocksAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cBlocksBlockSMCParserRuleCall_0_0 = (RuleCall)cBlocksAssignment_0.eContents().get(0);
		private final Assignment cMainAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cMainMainSMCParserRuleCall_1_0 = (RuleCall)cMainAssignment_1.eContents().get(0);
		
		//Smc:
		//	blocks+=BlockSMC* & main=MainSMC?;
		@Override public ParserRule getRule() { return rule; }
		
		//blocks+=BlockSMC* & main=MainSMC?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//blocks+=BlockSMC*
		public Assignment getBlocksAssignment_0() { return cBlocksAssignment_0; }
		
		//BlockSMC
		public RuleCall getBlocksBlockSMCParserRuleCall_0_0() { return cBlocksBlockSMCParserRuleCall_0_0; }
		
		//main=MainSMC?
		public Assignment getMainAssignment_1() { return cMainAssignment_1; }
		
		//MainSMC
		public RuleCall getMainMainSMCParserRuleCall_1_0() { return cMainMainSMCParserRuleCall_1_0; }
	}
	public class BlockSMCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.BlockSMC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBlockKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeBlockTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cNewKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//BlockSMC:
		//	'block' type=BlockType name=ID '=' 'new' '(' ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'block' type=BlockType name=ID '=' 'new' '(' ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'block'
		public Keyword getBlockKeyword_0() { return cBlockKeyword_0; }
		
		//type=BlockType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//BlockType
		public RuleCall getTypeBlockTypeEnumRuleCall_1_0() { return cTypeBlockTypeEnumRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//'new'
		public Keyword getNewKeyword_4() { return cNewKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class MainSMCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.MainSMC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cMainSMCAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommandsCommandParserRuleCall_3_0 = (RuleCall)cCommandsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MainSMC:
		//	'main' {MainSMC} '{'
		//	commands+=Command*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'main' {MainSMC} '{' commands+=Command* '}'
		public Group getGroup() { return cGroup; }
		
		//'main'
		public Keyword getMainKeyword_0() { return cMainKeyword_0; }
		
		//{MainSMC}
		public Action getMainSMCAction_1() { return cMainSMCAction_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_3() { return cCommandsAssignment_3; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_3_0() { return cCommandsCommandParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableAssignmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIfThenElseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWhileParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPrintParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cInvocationVoidParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cParamDeclParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cReturnParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		///* Command */ Command:
		//	Block | VariableDecl | VariableAssignment | IfThenElse | While | Print | InvocationVoid | ParamDecl | Return;
		@Override public ParserRule getRule() { return rule; }
		
		//Block | VariableDecl | VariableAssignment | IfThenElse | While | Print | InvocationVoid | ParamDecl | Return
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Block
		public RuleCall getBlockParserRuleCall_0() { return cBlockParserRuleCall_0; }
		
		//VariableDecl
		public RuleCall getVariableDeclParserRuleCall_1() { return cVariableDeclParserRuleCall_1; }
		
		//VariableAssignment
		public RuleCall getVariableAssignmentParserRuleCall_2() { return cVariableAssignmentParserRuleCall_2; }
		
		//IfThenElse
		public RuleCall getIfThenElseParserRuleCall_3() { return cIfThenElseParserRuleCall_3; }
		
		//While
		public RuleCall getWhileParserRuleCall_4() { return cWhileParserRuleCall_4; }
		
		//Print
		public RuleCall getPrintParserRuleCall_5() { return cPrintParserRuleCall_5; }
		
		//InvocationVoid
		public RuleCall getInvocationVoidParserRuleCall_6() { return cInvocationVoidParserRuleCall_6; }
		
		//ParamDecl
		public RuleCall getParamDeclParserRuleCall_7() { return cParamDeclParserRuleCall_7; }
		
		//Return
		public RuleCall getReturnParserRuleCall_8() { return cReturnParserRuleCall_8; }
	}
	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Return Command:
		//	{Return} 'return' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Return} 'return' ';'
		public Group getGroup() { return cGroup; }
		
		//{Return}
		public Action getReturnAction_0() { return cReturnAction_0; }
		
		//'return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ParamDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.ParamDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStypeSecTypeEnumRuleCall_4_0 = (RuleCall)cStypeAssignment_4.eContents().get(0);
		private final Assignment cBtypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBtypeBasicTypeEnumRuleCall_5_0 = (RuleCall)cBtypeAssignment_5.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cParNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cParNameSTRINGTerminalRuleCall_7_0 = (RuleCall)cParNameAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ParamDecl:
		//	'parameter' name=ID '=' '<' stype=SecType btype=BasicType '>' parName=STRING ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'parameter' name=ID '=' '<' stype=SecType btype=BasicType '>' parName=STRING ';'
		public Group getGroup() { return cGroup; }
		
		//'parameter'
		public Keyword getParameterKeyword_0() { return cParameterKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }
		
		//stype=SecType
		public Assignment getStypeAssignment_4() { return cStypeAssignment_4; }
		
		//SecType
		public RuleCall getStypeSecTypeEnumRuleCall_4_0() { return cStypeSecTypeEnumRuleCall_4_0; }
		
		//btype=BasicType
		public Assignment getBtypeAssignment_5() { return cBtypeAssignment_5; }
		
		//BasicType
		public RuleCall getBtypeBasicTypeEnumRuleCall_5_0() { return cBtypeBasicTypeEnumRuleCall_5_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_6() { return cGreaterThanSignKeyword_6; }
		
		//parName=STRING
		public Assignment getParNameAssignment_7() { return cParNameAssignment_7; }
		
		//STRING
		public RuleCall getParNameSTRINGTerminalRuleCall_7_0() { return cParNameSTRINGTerminalRuleCall_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class InvocationVoidElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.InvocationVoid");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCallAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCallInvocationParserRuleCall_0_0 = (RuleCall)cCallAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InvocationVoid:
		//	call=Invocation ';';
		@Override public ParserRule getRule() { return rule; }
		
		//call=Invocation ';'
		public Group getGroup() { return cGroup; }
		
		//call=Invocation
		public Assignment getCallAssignment_0() { return cCallAssignment_0; }
		
		//Invocation
		public RuleCall getCallInvocationParserRuleCall_0_0() { return cCallInvocationParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommandsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommandsCommandParserRuleCall_2_0 = (RuleCall)cCommandsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block Command:
		//	{Block} '{' commands+=Command* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} '{' commands+=Command* '}'
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_2() { return cCommandsAssignment_2; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_2_0() { return cCommandsCommandParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Print:
		//	'print' '(' value=Expression ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'print' '(' value=Expression ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'print'
		public Keyword getPrintKeyword_0() { return cPrintKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyCommandParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//While:
		//	'while' '(' condition=Expression ')' body=Command;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' '(' condition=Expression ')' body=Command
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//body=Command
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//Command
		public RuleCall getBodyCommandParserRuleCall_4_0() { return cBodyCommandParserRuleCall_4_0; }
	}
	public class IfThenElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.IfThenElse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenBrachAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenBrachCommandParserRuleCall_4_0 = (RuleCall)cThenBrachAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseBranchAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseBranchCommandParserRuleCall_5_1_0 = (RuleCall)cElseBranchAssignment_5_1.eContents().get(0);
		
		//IfThenElse:
		//	'if' '(' condition=Expression ')' thenBrach=Command (=> 'else' elseBranch=Command)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' condition=Expression ')' thenBrach=Command (=> 'else' elseBranch=Command)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//thenBrach=Command
		public Assignment getThenBrachAssignment_4() { return cThenBrachAssignment_4; }
		
		//Command
		public RuleCall getThenBrachCommandParserRuleCall_4_0() { return cThenBrachCommandParserRuleCall_4_0; }
		
		//(=> 'else' elseBranch=Command)?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> 'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//elseBranch=Command
		public Assignment getElseBranchAssignment_5_1() { return cElseBranchAssignment_5_1; }
		
		//Command
		public RuleCall getElseBranchCommandParserRuleCall_5_1_0() { return cElseBranchCommandParserRuleCall_5_1_0; }
	}
	public class VariableDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.VariableDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilitySecTypeEnumRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeBasicTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArrayAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cArrayLeftSquareBracketKeyword_3_0_0 = (Keyword)cArrayAssignment_3_0.eContents().get(0);
		private final Assignment cLengthAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLengthINTTerminalRuleCall_3_1_0 = (RuleCall)cLengthAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOptionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOptionAbstractAssignmentParserRuleCall_5_1_0 = (RuleCall)cOptionAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//VariableDecl:
		//	'var' visibility=SecType type=BasicType (array?='[' length=INT? ']')? name=ID ('=' option=AbstractAssignment)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'var' visibility=SecType type=BasicType (array?='[' length=INT? ']')? name=ID ('=' option=AbstractAssignment)? ';'
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//visibility=SecType
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//SecType
		public RuleCall getVisibilitySecTypeEnumRuleCall_1_0() { return cVisibilitySecTypeEnumRuleCall_1_0; }
		
		//type=BasicType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//BasicType
		public RuleCall getTypeBasicTypeEnumRuleCall_2_0() { return cTypeBasicTypeEnumRuleCall_2_0; }
		
		//(array?='[' length=INT? ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//array?='['
		public Assignment getArrayAssignment_3_0() { return cArrayAssignment_3_0; }
		
		//'['
		public Keyword getArrayLeftSquareBracketKeyword_3_0_0() { return cArrayLeftSquareBracketKeyword_3_0_0; }
		
		//length=INT?
		public Assignment getLengthAssignment_3_1() { return cLengthAssignment_3_1; }
		
		//INT
		public RuleCall getLengthINTTerminalRuleCall_3_1_0() { return cLengthINTTerminalRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//('=' option=AbstractAssignment)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_0() { return cEqualsSignKeyword_5_0; }
		
		//option=AbstractAssignment
		public Assignment getOptionAssignment_5_1() { return cOptionAssignment_5_1; }
		
		//AbstractAssignment
		public RuleCall getOptionAbstractAssignmentParserRuleCall_5_1_0() { return cOptionAbstractAssignmentParserRuleCall_5_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class VariableAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.VariableAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVarVariableDeclCrossReference_0_0 = (CrossReference)cVarAssignment_0.eContents().get(0);
		private final RuleCall cVarVariableDeclIDTerminalRuleCall_0_0_1 = (RuleCall)cVarVariableDeclCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOptionAbstractAssignmentParserRuleCall_2_0 = (RuleCall)cOptionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VariableAssignment:
		//	var=[VariableDecl] '=' option=AbstractAssignment ';';
		@Override public ParserRule getRule() { return rule; }
		
		//var=[VariableDecl] '=' option=AbstractAssignment ';'
		public Group getGroup() { return cGroup; }
		
		//var=[VariableDecl]
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//[VariableDecl]
		public CrossReference getVarVariableDeclCrossReference_0_0() { return cVarVariableDeclCrossReference_0_0; }
		
		//ID
		public RuleCall getVarVariableDeclIDTerminalRuleCall_0_0_1() { return cVarVariableDeclIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//option=AbstractAssignment
		public Assignment getOptionAssignment_2() { return cOptionAssignment_2; }
		
		//AbstractAssignment
		public RuleCall getOptionAbstractAssignmentParserRuleCall_2_0() { return cOptionAbstractAssignmentParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class AbstractAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.AbstractAssignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDownloadParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractAssignment:
		//	Expression | Download;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression | Download
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//Download
		public RuleCall getDownloadParserRuleCall_1() { return cDownloadParserRuleCall_1; }
	}
	public class DownloadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Download");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClientParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDatabaseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Download:
		//	Client | Database;
		@Override public ParserRule getRule() { return rule; }
		
		//Client | Database
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Client
		public RuleCall getClientParserRuleCall_0() { return cClientParserRuleCall_0; }
		
		//Database
		public RuleCall getDatabaseParserRuleCall_1() { return cDatabaseParserRuleCall_1; }
	}
	public class DatabaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Database");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRetrieveFromDBKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTblAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTblAtomicParserRuleCall_2_0 = (RuleCall)cTblAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cClmAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClmSTRINGTerminalRuleCall_4_0 = (RuleCall)cClmAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Database:
		//	'retrieveFromDB' '(' tbl=Atomic ',' clm=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'retrieveFromDB' '(' tbl=Atomic ',' clm=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'retrieveFromDB'
		public Keyword getRetrieveFromDBKeyword_0() { return cRetrieveFromDBKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//tbl=Atomic
		public Assignment getTblAssignment_2() { return cTblAssignment_2; }
		
		//Atomic
		public RuleCall getTblAtomicParserRuleCall_2_0() { return cTblAtomicParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//clm=STRING
		public Assignment getClmAssignment_4() { return cClmAssignment_4; }
		
		//STRING
		public RuleCall getClmSTRINGTerminalRuleCall_4_0() { return cClmSTRINGTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ClientElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Client");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRetrieveFromClientKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgSTRINGTerminalRuleCall_2_0 = (RuleCall)cArgAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Client:
		//	'retrieveFromClient' '(' arg=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'retrieveFromClient' '(' arg=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'retrieveFromClient'
		public Keyword getRetrieveFromClientKeyword_0() { return cRetrieveFromClientKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//arg=STRING
		public Assignment getArgAssignment_2() { return cArgAssignment_2; }
		
		//STRING
		public RuleCall getArgSTRINGTerminalRuleCall_2_0() { return cArgSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Expression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* Expression */ Expression:
		//	Or;
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or Expression:
		//	And ({Or.left=current} "||" right=And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} "||" right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} "||" right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And Expression:
		//	Equality ({And.left=current} "&&" right=Equality)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equality ({And.left=current} "&&" right=Equality)*
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({And.left=current} "&&" right=Equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equality Expression:
		//	Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Equality.left=current} op=("==" | "!=") right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }
		
		//op=("==" | "!=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//("==" | "!=")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison Expression:
		//	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }
		
		//({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//op=(">=" | "<=" | ">" | "<")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//(">=" | "<=" | ">" | "<")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }
		
		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }
		
		//right=PlusOrMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_2_0() { return cRightPlusOrMinusParserRuleCall_1_2_0; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPlusOrMinusLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMulOrDivParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//PlusOrMinus Expression:
		//	MulOrDiv ({PlusOrMinus.left=current} op=('+' | '-') right=MulOrDiv)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MulOrDiv ({PlusOrMinus.left=current} op=('+' | '-') right=MulOrDiv)*
		public Group getGroup() { return cGroup; }
		
		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }
		
		//({PlusOrMinus.left=current} op=('+' | '-') right=MulOrDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{PlusOrMinus.left=current}
		public Action getPlusOrMinusLeftAction_1_0() { return cPlusOrMinusLeftAction_1_0; }
		
		//op=('+' | '-')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('+' | '-')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_1_1_0_0() { return cOpPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_1_1_0_1() { return cOpHyphenMinusKeyword_1_1_0_1; }
		
		//right=MulOrDiv
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_2_0() { return cRightMulOrDivParserRuleCall_1_2_0; }
	}
	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulOrDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MulOrDiv Expression:
		//	Primary ({MulOrDiv.left=current} op=('*' | '/') right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({MulOrDiv.left=current} op=('*' | '/') right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({MulOrDiv.left=current} op=('*' | '/') right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MulOrDiv.left=current}
		public Action getMulOrDivLeftAction_1_0() { return cMulOrDivLeftAction_1_0; }
		
		//op=('*' | '/')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Primary Expression:
		//	'(' Expression ')' | {Not} "!" expression=Primary | Atomic;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | {Not} "!" expression=Primary | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{Not} "!" expression=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDoubleLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueREALTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBooleanLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStringLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cDateLiteralAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueDATETerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cTimeLiteralAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueTIMETerminalRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cVariableRefAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cVariableAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cVariableVariableDeclCrossReference_6_1_0 = (CrossReference)cVariableAssignment_6_1.eContents().get(0);
		private final RuleCall cVariableVariableDeclIDTerminalRuleCall_6_1_0_1 = (RuleCall)cVariableVariableDeclCrossReference_6_1_0.eContents().get(1);
		private final RuleCall cTupleParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cListParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cDictParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cInvocationParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//Atomic Expression:
		//	{IntLiteral} value=INT
		//	| {DoubleLiteral} value=REAL
		//	| {BooleanLiteral} value=BOOLEAN
		//	| {StringLiteral} value=STRING
		//	| {DateLiteral} value=DATE
		//	| {TimeLiteral} value=TIME
		//	| {VariableRef} variable=[VariableDecl] | Tuple
		//	| List
		//	| Dict
		//	| Invocation;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntLiteral} value=INT | {DoubleLiteral} value=REAL | {BooleanLiteral} value=BOOLEAN | {StringLiteral} value=STRING |
		//{DateLiteral} value=DATE | {TimeLiteral} value=TIME | {VariableRef} variable=[VariableDecl] | Tuple | List | Dict |
		//Invocation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntLiteral} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntLiteral}
		public Action getIntLiteralAction_0_0() { return cIntLiteralAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{DoubleLiteral} value=REAL
		public Group getGroup_1() { return cGroup_1; }
		
		//{DoubleLiteral}
		public Action getDoubleLiteralAction_1_0() { return cDoubleLiteralAction_1_0; }
		
		//value=REAL
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//REAL
		public RuleCall getValueREALTerminalRuleCall_1_1_0() { return cValueREALTerminalRuleCall_1_1_0; }
		
		//{BooleanLiteral} value=BOOLEAN
		public Group getGroup_2() { return cGroup_2; }
		
		//{BooleanLiteral}
		public Action getBooleanLiteralAction_2_0() { return cBooleanLiteralAction_2_0; }
		
		//value=BOOLEAN
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_2_1_0() { return cValueBOOLEANTerminalRuleCall_2_1_0; }
		
		//{StringLiteral} value=STRING
		public Group getGroup_3() { return cGroup_3; }
		
		//{StringLiteral}
		public Action getStringLiteralAction_3_0() { return cStringLiteralAction_3_0; }
		
		//value=STRING
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_1_0() { return cValueSTRINGTerminalRuleCall_3_1_0; }
		
		//{DateLiteral} value=DATE
		public Group getGroup_4() { return cGroup_4; }
		
		//{DateLiteral}
		public Action getDateLiteralAction_4_0() { return cDateLiteralAction_4_0; }
		
		//value=DATE
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//DATE
		public RuleCall getValueDATETerminalRuleCall_4_1_0() { return cValueDATETerminalRuleCall_4_1_0; }
		
		//{TimeLiteral} value=TIME
		public Group getGroup_5() { return cGroup_5; }
		
		//{TimeLiteral}
		public Action getTimeLiteralAction_5_0() { return cTimeLiteralAction_5_0; }
		
		//value=TIME
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }
		
		//TIME
		public RuleCall getValueTIMETerminalRuleCall_5_1_0() { return cValueTIMETerminalRuleCall_5_1_0; }
		
		//{VariableRef} variable=[VariableDecl]
		public Group getGroup_6() { return cGroup_6; }
		
		//{VariableRef}
		public Action getVariableRefAction_6_0() { return cVariableRefAction_6_0; }
		
		//variable=[VariableDecl]
		public Assignment getVariableAssignment_6_1() { return cVariableAssignment_6_1; }
		
		//[VariableDecl]
		public CrossReference getVariableVariableDeclCrossReference_6_1_0() { return cVariableVariableDeclCrossReference_6_1_0; }
		
		//ID
		public RuleCall getVariableVariableDeclIDTerminalRuleCall_6_1_0_1() { return cVariableVariableDeclIDTerminalRuleCall_6_1_0_1; }
		
		//Tuple
		public RuleCall getTupleParserRuleCall_7() { return cTupleParserRuleCall_7; }
		
		//List
		public RuleCall getListParserRuleCall_8() { return cListParserRuleCall_8; }
		
		//Dict
		public RuleCall getDictParserRuleCall_9() { return cDictParserRuleCall_9; }
		
		//Invocation
		public RuleCall getInvocationParserRuleCall_10() { return cInvocationParserRuleCall_10; }
	}
	public class TupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Tuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTupleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArg1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArg1AtomicParserRuleCall_2_0 = (RuleCall)cArg1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArg2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArg2AtomicParserRuleCall_4_0 = (RuleCall)cArg2Assignment_4.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Tuple:
		//	'tuple' '<' arg1=Atomic ',' arg2=Atomic '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'tuple' '<' arg1=Atomic ',' arg2=Atomic '>'
		public Group getGroup() { return cGroup; }
		
		//'tuple'
		public Keyword getTupleKeyword_0() { return cTupleKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//arg1=Atomic
		public Assignment getArg1Assignment_2() { return cArg1Assignment_2; }
		
		//Atomic
		public RuleCall getArg1AtomicParserRuleCall_2_0() { return cArg1AtomicParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//arg2=Atomic
		public Assignment getArg2Assignment_4() { return cArg2Assignment_4; }
		
		//Atomic
		public RuleCall getArg2AtomicParserRuleCall_4_0() { return cArg2AtomicParserRuleCall_4_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
	}
	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsAtomicParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsAtomicParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//List:
		//	'list' '(' (args+=Atomic (',' args+=Atomic)*) ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'list' '(' (args+=Atomic (',' args+=Atomic)*) ')'
		public Group getGroup() { return cGroup; }
		
		//'list'
		public Keyword getListKeyword_0() { return cListKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//args+=Atomic (',' args+=Atomic)*
		public Group getGroup_2() { return cGroup_2; }
		
		//args+=Atomic
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }
		
		//Atomic
		public RuleCall getArgsAtomicParserRuleCall_2_0_0() { return cArgsAtomicParserRuleCall_2_0_0; }
		
		//(',' args+=Atomic)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//args+=Atomic
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }
		
		//Atomic
		public RuleCall getArgsAtomicParserRuleCall_2_1_1_0() { return cArgsAtomicParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class DictElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Dict");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDictKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeyAtomicParserRuleCall_2_0 = (RuleCall)cKeyAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cValueListCrossReference_4_0 = (CrossReference)cValueAssignment_4.eContents().get(0);
		private final RuleCall cValueListIDTerminalRuleCall_4_0_1 = (RuleCall)cValueListCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Dict:
		//	'dict' '(' key=Atomic ',' value=[List] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'dict' '(' key=Atomic ',' value=[List] ')'
		public Group getGroup() { return cGroup; }
		
		//'dict'
		public Keyword getDictKeyword_0() { return cDictKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//key=Atomic
		public Assignment getKeyAssignment_2() { return cKeyAssignment_2; }
		
		//Atomic
		public RuleCall getKeyAtomicParserRuleCall_2_0() { return cKeyAtomicParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//value=[List]
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//[List]
		public CrossReference getValueListCrossReference_4_0() { return cValueListCrossReference_4_0; }
		
		//ID
		public RuleCall getValueListIDTerminalRuleCall_4_0_1() { return cValueListIDTerminalRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class InvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Invocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBlockNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cBlockNameBlockSMCCrossReference_0_0 = (CrossReference)cBlockNameAssignment_0.eContents().get(0);
		private final RuleCall cBlockNameBlockSMCIDTerminalRuleCall_0_0_1 = (RuleCall)cBlockNameBlockSMCCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFuncNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFuncNameFunctionsParserRuleCall_2_0 = (RuleCall)cFuncNameAssignment_2.eContents().get(0);
		
		//Invocation:
		//	blockName=[BlockSMC] '.' funcName=Functions;
		@Override public ParserRule getRule() { return rule; }
		
		//blockName=[BlockSMC] '.' funcName=Functions
		public Group getGroup() { return cGroup; }
		
		//blockName=[BlockSMC]
		public Assignment getBlockNameAssignment_0() { return cBlockNameAssignment_0; }
		
		//[BlockSMC]
		public CrossReference getBlockNameBlockSMCCrossReference_0_0() { return cBlockNameBlockSMCCrossReference_0_0; }
		
		//ID
		public RuleCall getBlockNameBlockSMCIDTerminalRuleCall_0_0_1() { return cBlockNameBlockSMCIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//funcName=Functions
		public Assignment getFuncNameAssignment_2() { return cFuncNameAssignment_2; }
		
		//Functions
		public RuleCall getFuncNameFunctionsParserRuleCall_2_0() { return cFuncNameFunctionsParserRuleCall_2_0; }
	}
	public class FunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Functions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCreateTableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCheckTableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAddValuesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBloomFilterParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSearchParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAccessControlParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cComputationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Functions:
		//	CreateTable | CheckTable | AddValues | BloomFilter | Search | AccessControl | Computation;
		@Override public ParserRule getRule() { return rule; }
		
		//CreateTable | CheckTable | AddValues | BloomFilter | Search | AccessControl | Computation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CreateTable
		public RuleCall getCreateTableParserRuleCall_0() { return cCreateTableParserRuleCall_0; }
		
		//CheckTable
		public RuleCall getCheckTableParserRuleCall_1() { return cCheckTableParserRuleCall_1; }
		
		//AddValues
		public RuleCall getAddValuesParserRuleCall_2() { return cAddValuesParserRuleCall_2; }
		
		//BloomFilter
		public RuleCall getBloomFilterParserRuleCall_3() { return cBloomFilterParserRuleCall_3; }
		
		//Search
		public RuleCall getSearchParserRuleCall_4() { return cSearchParserRuleCall_4; }
		
		//AccessControl
		public RuleCall getAccessControlParserRuleCall_5() { return cAccessControlParserRuleCall_5; }
		
		//Computation
		public RuleCall getComputationParserRuleCall_6() { return cComputationParserRuleCall_6; }
	}
	public class ComputationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Computation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCountParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAverageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWeightedAvgParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMedianParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMultiplicationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		///* Block Computation */ Computation:
		//	Count | Average | WeightedAvg | Median | Multiplication;
		@Override public ParserRule getRule() { return rule; }
		
		//Count | Average | WeightedAvg | Median | Multiplication
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Count
		public RuleCall getCountParserRuleCall_0() { return cCountParserRuleCall_0; }
		
		//Average
		public RuleCall getAverageParserRuleCall_1() { return cAverageParserRuleCall_1; }
		
		//WeightedAvg
		public RuleCall getWeightedAvgParserRuleCall_2() { return cWeightedAvgParserRuleCall_2; }
		
		//Median
		public RuleCall getMedianParserRuleCall_3() { return cMedianParserRuleCall_3; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_4() { return cMultiplicationParserRuleCall_4; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMultiplicationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cXVariableDeclCrossReference_2_0 = (CrossReference)cXAssignment_2.eContents().get(0);
		private final RuleCall cXVariableDeclIDTerminalRuleCall_2_0_1 = (RuleCall)cXVariableDeclCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cYVariableDeclCrossReference_4_0 = (CrossReference)cYAssignment_4.eContents().get(0);
		private final RuleCall cYVariableDeclIDTerminalRuleCall_4_0_1 = (RuleCall)cYVariableDeclCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Multiplication:
		//	'multiplication' '(' x=[VariableDecl] ',' y=[VariableDecl] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'multiplication' '(' x=[VariableDecl] ',' y=[VariableDecl] ')'
		public Group getGroup() { return cGroup; }
		
		//'multiplication'
		public Keyword getMultiplicationKeyword_0() { return cMultiplicationKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//x=[VariableDecl]
		public Assignment getXAssignment_2() { return cXAssignment_2; }
		
		//[VariableDecl]
		public CrossReference getXVariableDeclCrossReference_2_0() { return cXVariableDeclCrossReference_2_0; }
		
		//ID
		public RuleCall getXVariableDeclIDTerminalRuleCall_2_0_1() { return cXVariableDeclIDTerminalRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//y=[VariableDecl]
		public Assignment getYAssignment_4() { return cYAssignment_4; }
		
		//[VariableDecl]
		public CrossReference getYVariableDeclCrossReference_4_0() { return cYVariableDeclCrossReference_4_0; }
		
		//ID
		public RuleCall getYVariableDeclIDTerminalRuleCall_4_0_1() { return cYVariableDeclIDTerminalRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class MedianElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Median");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMedianKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArrayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cArrayVariableDeclCrossReference_2_0 = (CrossReference)cArrayAssignment_2.eContents().get(0);
		private final RuleCall cArrayVariableDeclIDTerminalRuleCall_2_0_1 = (RuleCall)cArrayVariableDeclCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Median:
		//	'median' '(' array=[VariableDecl] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'median' '(' array=[VariableDecl] ')'
		public Group getGroup() { return cGroup; }
		
		//'median'
		public Keyword getMedianKeyword_0() { return cMedianKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//array=[VariableDecl]
		public Assignment getArrayAssignment_2() { return cArrayAssignment_2; }
		
		//[VariableDecl]
		public CrossReference getArrayVariableDeclCrossReference_2_0() { return cArrayVariableDeclCrossReference_2_0; }
		
		//ID
		public RuleCall getArrayVariableDeclIDTerminalRuleCall_2_0_1() { return cArrayVariableDeclIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class WeightedAvgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.WeightedAvg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cW_avgKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWeightsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cWeightsVariableDeclCrossReference_2_0 = (CrossReference)cWeightsAssignment_2.eContents().get(0);
		private final RuleCall cWeightsVariableDeclIDTerminalRuleCall_2_0_1 = (RuleCall)cWeightsVariableDeclCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElemsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cElemsVariableDeclCrossReference_4_0 = (CrossReference)cElemsAssignment_4.eContents().get(0);
		private final RuleCall cElemsVariableDeclIDTerminalRuleCall_4_0_1 = (RuleCall)cElemsVariableDeclCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//WeightedAvg:
		//	'w_avg' '(' weights=[VariableDecl] ',' elems=[VariableDecl] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'w_avg' '(' weights=[VariableDecl] ',' elems=[VariableDecl] ')'
		public Group getGroup() { return cGroup; }
		
		//'w_avg'
		public Keyword getW_avgKeyword_0() { return cW_avgKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//weights=[VariableDecl]
		public Assignment getWeightsAssignment_2() { return cWeightsAssignment_2; }
		
		//[VariableDecl]
		public CrossReference getWeightsVariableDeclCrossReference_2_0() { return cWeightsVariableDeclCrossReference_2_0; }
		
		//ID
		public RuleCall getWeightsVariableDeclIDTerminalRuleCall_2_0_1() { return cWeightsVariableDeclIDTerminalRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//elems=[VariableDecl]
		public Assignment getElemsAssignment_4() { return cElemsAssignment_4; }
		
		//[VariableDecl]
		public CrossReference getElemsVariableDeclCrossReference_4_0() { return cElemsVariableDeclCrossReference_4_0; }
		
		//ID
		public RuleCall getElemsVariableDeclIDTerminalRuleCall_4_0_1() { return cElemsVariableDeclIDTerminalRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class AverageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Average");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAvgKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArrayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cArrayVariableDeclCrossReference_2_0 = (CrossReference)cArrayAssignment_2.eContents().get(0);
		private final RuleCall cArrayVariableDeclIDTerminalRuleCall_2_0_1 = (RuleCall)cArrayVariableDeclCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Average:
		//	'avg' '(' array=[VariableDecl] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'avg' '(' array=[VariableDecl] ')'
		public Group getGroup() { return cGroup; }
		
		//'avg'
		public Keyword getAvgKeyword_0() { return cAvgKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//array=[VariableDecl]
		public Assignment getArrayAssignment_2() { return cArrayAssignment_2; }
		
		//[VariableDecl]
		public CrossReference getArrayVariableDeclCrossReference_2_0() { return cArrayVariableDeclCrossReference_2_0; }
		
		//ID
		public RuleCall getArrayVariableDeclIDTerminalRuleCall_2_0_1() { return cArrayVariableDeclIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class CountElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Count");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCountKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArrayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cArrayVariableDeclCrossReference_2_0 = (CrossReference)cArrayAssignment_2.eContents().get(0);
		private final RuleCall cArrayVariableDeclIDTerminalRuleCall_2_0_1 = (RuleCall)cArrayVariableDeclCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Count:
		//	'count' '(' array=[VariableDecl] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'count' '(' array=[VariableDecl] ')'
		public Group getGroup() { return cGroup; }
		
		//'count'
		public Keyword getCountKeyword_0() { return cCountKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//array=[VariableDecl]
		public Assignment getArrayAssignment_2() { return cArrayAssignment_2; }
		
		//[VariableDecl]
		public CrossReference getArrayVariableDeclCrossReference_2_0() { return cArrayVariableDeclCrossReference_2_0; }
		
		//ID
		public RuleCall getArrayVariableDeclIDTerminalRuleCall_2_0_1() { return cArrayVariableDeclIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class AccessControlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.AccessControl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCoveredParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBellLapadulaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* Block Access Control */ AccessControl:
		//	Covered | BellLapadula;
		@Override public ParserRule getRule() { return rule; }
		
		//Covered | BellLapadula
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Covered
		public RuleCall getCoveredParserRuleCall_0() { return cCoveredParserRuleCall_0; }
		
		//BellLapadula
		public RuleCall getBellLapadulaParserRuleCall_1() { return cBellLapadulaParserRuleCall_1; }
	}
	public class BellLapadulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.BellLapadula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAccessControlBLPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cCurAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cCurVariableDeclCrossReference_2_0_0 = (CrossReference)cCurAssignment_2_0.eContents().get(0);
		private final RuleCall cCurVariableDeclIDTerminalRuleCall_2_0_0_1 = (RuleCall)cCurVariableDeclCrossReference_2_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cModeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModeSTRINGTerminalRuleCall_3_0 = (RuleCall)cModeAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cC_lvlsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cC_lvlsVariableDeclCrossReference_5_0 = (CrossReference)cC_lvlsAssignment_5.eContents().get(0);
		private final RuleCall cC_lvlsVariableDeclIDTerminalRuleCall_5_0_1 = (RuleCall)cC_lvlsVariableDeclCrossReference_5_0.eContents().get(1);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cV_lvlAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cV_lvlVariableDeclCrossReference_7_0 = (CrossReference)cV_lvlAssignment_7.eContents().get(0);
		private final RuleCall cV_lvlVariableDeclIDTerminalRuleCall_7_0_1 = (RuleCall)cV_lvlVariableDeclCrossReference_7_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//BellLapadula:
		//	'accessControlBLP' '(' (cur=[VariableDecl] ',')? mode=STRING ',' c_lvls=[VariableDecl] ',' v_lvl=[VariableDecl] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'accessControlBLP' '(' (cur=[VariableDecl] ',')? mode=STRING ',' c_lvls=[VariableDecl] ',' v_lvl=[VariableDecl] ')'
		public Group getGroup() { return cGroup; }
		
		//'accessControlBLP'
		public Keyword getAccessControlBLPKeyword_0() { return cAccessControlBLPKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(cur=[VariableDecl] ',')?
		public Group getGroup_2() { return cGroup_2; }
		
		//cur=[VariableDecl]
		public Assignment getCurAssignment_2_0() { return cCurAssignment_2_0; }
		
		//[VariableDecl]
		public CrossReference getCurVariableDeclCrossReference_2_0_0() { return cCurVariableDeclCrossReference_2_0_0; }
		
		//ID
		public RuleCall getCurVariableDeclIDTerminalRuleCall_2_0_0_1() { return cCurVariableDeclIDTerminalRuleCall_2_0_0_1; }
		
		//','
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }
		
		//mode=STRING
		public Assignment getModeAssignment_3() { return cModeAssignment_3; }
		
		//STRING
		public RuleCall getModeSTRINGTerminalRuleCall_3_0() { return cModeSTRINGTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//c_lvls=[VariableDecl]
		public Assignment getC_lvlsAssignment_5() { return cC_lvlsAssignment_5; }
		
		//[VariableDecl]
		public CrossReference getC_lvlsVariableDeclCrossReference_5_0() { return cC_lvlsVariableDeclCrossReference_5_0; }
		
		//ID
		public RuleCall getC_lvlsVariableDeclIDTerminalRuleCall_5_0_1() { return cC_lvlsVariableDeclIDTerminalRuleCall_5_0_1; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//v_lvl=[VariableDecl]
		public Assignment getV_lvlAssignment_7() { return cV_lvlAssignment_7; }
		
		//[VariableDecl]
		public CrossReference getV_lvlVariableDeclCrossReference_7_0() { return cV_lvlVariableDeclCrossReference_7_0; }
		
		//ID
		public RuleCall getV_lvlVariableDeclIDTerminalRuleCall_7_0_1() { return cV_lvlVariableDeclIDTerminalRuleCall_7_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class CoveredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Covered");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAccessControlCoveredKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMatchAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMatchVariableDeclCrossReference_2_0 = (CrossReference)cMatchAssignment_2.eContents().get(0);
		private final RuleCall cMatchVariableDeclIDTerminalRuleCall_2_0_1 = (RuleCall)cMatchVariableDeclCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCoveredAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cCoveredVariableDeclCrossReference_4_0 = (CrossReference)cCoveredAssignment_4.eContents().get(0);
		private final RuleCall cCoveredVariableDeclIDTerminalRuleCall_4_0_1 = (RuleCall)cCoveredVariableDeclCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cC_lvlsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cC_lvlsVariableDeclCrossReference_6_0 = (CrossReference)cC_lvlsAssignment_6.eContents().get(0);
		private final RuleCall cC_lvlsVariableDeclIDTerminalRuleCall_6_0_1 = (RuleCall)cC_lvlsVariableDeclCrossReference_6_0.eContents().get(1);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cV_lvlAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cV_lvlVariableDeclCrossReference_8_0 = (CrossReference)cV_lvlAssignment_8.eContents().get(0);
		private final RuleCall cV_lvlVariableDeclIDTerminalRuleCall_8_0_1 = (RuleCall)cV_lvlVariableDeclCrossReference_8_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Covered:
		//	'accessControlCovered' '(' match=[VariableDecl] ',' covered=[VariableDecl] ',' c_lvls=[VariableDecl] ','
		//	v_lvl=[VariableDecl] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'accessControlCovered' '(' match=[VariableDecl] ',' covered=[VariableDecl] ',' c_lvls=[VariableDecl] ','
		//v_lvl=[VariableDecl] ')'
		public Group getGroup() { return cGroup; }
		
		//'accessControlCovered'
		public Keyword getAccessControlCoveredKeyword_0() { return cAccessControlCoveredKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//match=[VariableDecl]
		public Assignment getMatchAssignment_2() { return cMatchAssignment_2; }
		
		//[VariableDecl]
		public CrossReference getMatchVariableDeclCrossReference_2_0() { return cMatchVariableDeclCrossReference_2_0; }
		
		//ID
		public RuleCall getMatchVariableDeclIDTerminalRuleCall_2_0_1() { return cMatchVariableDeclIDTerminalRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//covered=[VariableDecl]
		public Assignment getCoveredAssignment_4() { return cCoveredAssignment_4; }
		
		//[VariableDecl]
		public CrossReference getCoveredVariableDeclCrossReference_4_0() { return cCoveredVariableDeclCrossReference_4_0; }
		
		//ID
		public RuleCall getCoveredVariableDeclIDTerminalRuleCall_4_0_1() { return cCoveredVariableDeclIDTerminalRuleCall_4_0_1; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//c_lvls=[VariableDecl]
		public Assignment getC_lvlsAssignment_6() { return cC_lvlsAssignment_6; }
		
		//[VariableDecl]
		public CrossReference getC_lvlsVariableDeclCrossReference_6_0() { return cC_lvlsVariableDeclCrossReference_6_0; }
		
		//ID
		public RuleCall getC_lvlsVariableDeclIDTerminalRuleCall_6_0_1() { return cC_lvlsVariableDeclIDTerminalRuleCall_6_0_1; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//v_lvl=[VariableDecl]
		public Assignment getV_lvlAssignment_8() { return cV_lvlAssignment_8; }
		
		//[VariableDecl]
		public CrossReference getV_lvlVariableDeclCrossReference_8_0() { return cV_lvlVariableDeclCrossReference_8_0; }
		
		//ID
		public RuleCall getV_lvlVariableDeclIDTerminalRuleCall_8_0_1() { return cV_lvlVariableDeclIDTerminalRuleCall_8_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class SearchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.Search");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSearchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTblnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTblnameVariableDeclCrossReference_2_0 = (CrossReference)cTblnameAssignment_2.eContents().get(0);
		private final RuleCall cTblnameVariableDeclIDTerminalRuleCall_2_0_1 = (RuleCall)cTblnameVariableDeclCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cColumnAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cColumnSTRINGTerminalRuleCall_4_0 = (RuleCall)cColumnAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cKeywordAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cKeywordVariableDeclCrossReference_6_0 = (CrossReference)cKeywordAssignment_6.eContents().get(0);
		private final RuleCall cKeywordVariableDeclIDTerminalRuleCall_6_0_1 = (RuleCall)cKeywordVariableDeclCrossReference_6_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		///* Block Search */ Search:
		//	'search' '(' tblname=[VariableDecl] ',' column=STRING ',' keyword=[VariableDecl] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'search' '(' tblname=[VariableDecl] ',' column=STRING ',' keyword=[VariableDecl] ')'
		public Group getGroup() { return cGroup; }
		
		//'search'
		public Keyword getSearchKeyword_0() { return cSearchKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//tblname=[VariableDecl]
		public Assignment getTblnameAssignment_2() { return cTblnameAssignment_2; }
		
		//[VariableDecl]
		public CrossReference getTblnameVariableDeclCrossReference_2_0() { return cTblnameVariableDeclCrossReference_2_0; }
		
		//ID
		public RuleCall getTblnameVariableDeclIDTerminalRuleCall_2_0_1() { return cTblnameVariableDeclIDTerminalRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//column=STRING
		public Assignment getColumnAssignment_4() { return cColumnAssignment_4; }
		
		//STRING
		public RuleCall getColumnSTRINGTerminalRuleCall_4_0() { return cColumnSTRINGTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//keyword=[VariableDecl]
		public Assignment getKeywordAssignment_6() { return cKeywordAssignment_6; }
		
		//[VariableDecl]
		public CrossReference getKeywordVariableDeclCrossReference_6_0() { return cKeywordVariableDeclCrossReference_6_0; }
		
		//ID
		public RuleCall getKeywordVariableDeclIDTerminalRuleCall_6_0_1() { return cKeywordVariableDeclIDTerminalRuleCall_6_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class BloomFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.BloomFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBloomFilterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPreAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPreVariableDeclCrossReference_2_0 = (CrossReference)cPreAssignment_2.eContents().get(0);
		private final RuleCall cPreVariableDeclIDTerminalRuleCall_2_0_1 = (RuleCall)cPreVariableDeclCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPostAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cPostVariableDeclCrossReference_4_0 = (CrossReference)cPostAssignment_4.eContents().get(0);
		private final RuleCall cPostVariableDeclIDTerminalRuleCall_4_0_1 = (RuleCall)cPostVariableDeclCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BloomFilter:
		//	'bloomFilter' '(' pre=[VariableDecl] ',' post=[VariableDecl] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'bloomFilter' '(' pre=[VariableDecl] ',' post=[VariableDecl] ')'
		public Group getGroup() { return cGroup; }
		
		//'bloomFilter'
		public Keyword getBloomFilterKeyword_0() { return cBloomFilterKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//pre=[VariableDecl]
		public Assignment getPreAssignment_2() { return cPreAssignment_2; }
		
		//[VariableDecl]
		public CrossReference getPreVariableDeclCrossReference_2_0() { return cPreVariableDeclCrossReference_2_0; }
		
		//ID
		public RuleCall getPreVariableDeclIDTerminalRuleCall_2_0_1() { return cPreVariableDeclIDTerminalRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//post=[VariableDecl]
		public Assignment getPostAssignment_4() { return cPostAssignment_4; }
		
		//[VariableDecl]
		public CrossReference getPostVariableDeclCrossReference_4_0() { return cPostVariableDeclCrossReference_4_0; }
		
		//ID
		public RuleCall getPostVariableDeclIDTerminalRuleCall_4_0_1() { return cPostVariableDeclIDTerminalRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class CheckTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.CheckTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckDatasetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTblnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTblnameVariableDeclCrossReference_2_0 = (CrossReference)cTblnameAssignment_2.eContents().get(0);
		private final RuleCall cTblnameVariableDeclIDTerminalRuleCall_2_0_1 = (RuleCall)cTblnameVariableDeclCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///* Block Insert Data */ CheckTable:
		//	'checkDataset' '(' tblname=[VariableDecl] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'checkDataset' '(' tblname=[VariableDecl] ')'
		public Group getGroup() { return cGroup; }
		
		//'checkDataset'
		public Keyword getCheckDatasetKeyword_0() { return cCheckDatasetKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//tblname=[VariableDecl]
		public Assignment getTblnameAssignment_2() { return cTblnameAssignment_2; }
		
		//[VariableDecl]
		public CrossReference getTblnameVariableDeclCrossReference_2_0() { return cTblnameVariableDeclCrossReference_2_0; }
		
		//ID
		public RuleCall getTblnameVariableDeclIDTerminalRuleCall_2_0_1() { return cTblnameVariableDeclIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class AddValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.AddValues");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddValuesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTblnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTblnameVariableDeclCrossReference_2_0 = (CrossReference)cTblnameAssignment_2.eContents().get(0);
		private final RuleCall cTblnameVariableDeclIDTerminalRuleCall_2_0_1 = (RuleCall)cTblnameVariableDeclCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cArgsVariableDeclCrossReference_3_1_0 = (CrossReference)cArgsAssignment_3_1.eContents().get(0);
		private final RuleCall cArgsVariableDeclIDTerminalRuleCall_3_1_0_1 = (RuleCall)cArgsVariableDeclCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cArgsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cArgsVariableDeclCrossReference_3_2_1_0 = (CrossReference)cArgsAssignment_3_2_1.eContents().get(0);
		private final RuleCall cArgsVariableDeclIDTerminalRuleCall_3_2_1_0_1 = (RuleCall)cArgsVariableDeclCrossReference_3_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AddValues:
		//	'addValues' '(' tblname=[VariableDecl] (',' args+=[VariableDecl] (',' args+=[VariableDecl])*)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'addValues' '(' tblname=[VariableDecl] (',' args+=[VariableDecl] (',' args+=[VariableDecl])*)+ ')'
		public Group getGroup() { return cGroup; }
		
		//'addValues'
		public Keyword getAddValuesKeyword_0() { return cAddValuesKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//tblname=[VariableDecl]
		public Assignment getTblnameAssignment_2() { return cTblnameAssignment_2; }
		
		//[VariableDecl]
		public CrossReference getTblnameVariableDeclCrossReference_2_0() { return cTblnameVariableDeclCrossReference_2_0; }
		
		//ID
		public RuleCall getTblnameVariableDeclIDTerminalRuleCall_2_0_1() { return cTblnameVariableDeclIDTerminalRuleCall_2_0_1; }
		
		//(',' args+=[VariableDecl] (',' args+=[VariableDecl])*)+
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//args+=[VariableDecl]
		public Assignment getArgsAssignment_3_1() { return cArgsAssignment_3_1; }
		
		//[VariableDecl]
		public CrossReference getArgsVariableDeclCrossReference_3_1_0() { return cArgsVariableDeclCrossReference_3_1_0; }
		
		//ID
		public RuleCall getArgsVariableDeclIDTerminalRuleCall_3_1_0_1() { return cArgsVariableDeclIDTerminalRuleCall_3_1_0_1; }
		
		//(',' args+=[VariableDecl])*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//args+=[VariableDecl]
		public Assignment getArgsAssignment_3_2_1() { return cArgsAssignment_3_2_1; }
		
		//[VariableDecl]
		public CrossReference getArgsVariableDeclCrossReference_3_2_1_0() { return cArgsVariableDeclCrossReference_3_2_1_0; }
		
		//ID
		public RuleCall getArgsVariableDeclIDTerminalRuleCall_3_2_1_0_1() { return cArgsVariableDeclIDTerminalRuleCall_3_2_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class CreateTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.CreateTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateDatasetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTblnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTblnameVariableDeclCrossReference_2_0 = (CrossReference)cTblnameAssignment_2.eContents().get(0);
		private final RuleCall cTblnameVariableDeclIDTerminalRuleCall_2_0_1 = (RuleCall)cTblnameVariableDeclCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParamsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cParamsParamDeclCrossReference_3_1_0 = (CrossReference)cParamsAssignment_3_1.eContents().get(0);
		private final RuleCall cParamsParamDeclIDTerminalRuleCall_3_1_0_1 = (RuleCall)cParamsParamDeclCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cParamsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cParamsParamDeclCrossReference_3_2_1_0 = (CrossReference)cParamsAssignment_3_2_1.eContents().get(0);
		private final RuleCall cParamsParamDeclIDTerminalRuleCall_3_2_1_0_1 = (RuleCall)cParamsParamDeclCrossReference_3_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CreateTable:
		//	'createDataset' '(' tblname=[VariableDecl] (',' params+=[ParamDecl] (',' params+=[ParamDecl])*)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'createDataset' '(' tblname=[VariableDecl] (',' params+=[ParamDecl] (',' params+=[ParamDecl])*)+ ')'
		public Group getGroup() { return cGroup; }
		
		//'createDataset'
		public Keyword getCreateDatasetKeyword_0() { return cCreateDatasetKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//tblname=[VariableDecl]
		public Assignment getTblnameAssignment_2() { return cTblnameAssignment_2; }
		
		//[VariableDecl]
		public CrossReference getTblnameVariableDeclCrossReference_2_0() { return cTblnameVariableDeclCrossReference_2_0; }
		
		//ID
		public RuleCall getTblnameVariableDeclIDTerminalRuleCall_2_0_1() { return cTblnameVariableDeclIDTerminalRuleCall_2_0_1; }
		
		//(',' params+=[ParamDecl] (',' params+=[ParamDecl])*)+
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//params+=[ParamDecl]
		public Assignment getParamsAssignment_3_1() { return cParamsAssignment_3_1; }
		
		//[ParamDecl]
		public CrossReference getParamsParamDeclCrossReference_3_1_0() { return cParamsParamDeclCrossReference_3_1_0; }
		
		//ID
		public RuleCall getParamsParamDeclIDTerminalRuleCall_3_1_0_1() { return cParamsParamDeclIDTerminalRuleCall_3_1_0_1; }
		
		//(',' params+=[ParamDecl])*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//params+=[ParamDecl]
		public Assignment getParamsAssignment_3_2_1() { return cParamsAssignment_3_2_1; }
		
		//[ParamDecl]
		public CrossReference getParamsParamDeclCrossReference_3_2_1_0() { return cParamsParamDeclCrossReference_3_2_1_0; }
		
		//ID
		public RuleCall getParamsParamDeclIDTerminalRuleCall_3_2_1_0_1() { return cParamsParamDeclIDTerminalRuleCall_3_2_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	public class BlockTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.BlockType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINSERTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINSERTInsert_dataKeyword_0_0 = (Keyword)cINSERTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCOMPMath_computationKeyword_1_0 = (Keyword)cCOMPEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSEARCHEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSEARCHSearchKeyword_2_0 = (Keyword)cSEARCHEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cANONYMIZATIONEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cANONYMIZATIONAnonymizationKeyword_3_0 = (Keyword)cANONYMIZATIONEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cACCESSEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cACCESSAccess_controlKeyword_4_0 = (Keyword)cACCESSEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cPERMISSIONEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cPERMISSIONPermission_releaseKeyword_5_0 = (Keyword)cPERMISSIONEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum BlockType:
		//	INSERT='insert_data' | COMP='math_computation' | SEARCH='search' | ANONYMIZATION='anonymization' |
		//	ACCESS='access_control' | PERMISSION='permission_release';
		public EnumRule getRule() { return rule; }
		
		//INSERT='insert_data' | COMP='math_computation' | SEARCH='search' | ANONYMIZATION='anonymization' |
		//ACCESS='access_control' | PERMISSION='permission_release'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INSERT='insert_data'
		public EnumLiteralDeclaration getINSERTEnumLiteralDeclaration_0() { return cINSERTEnumLiteralDeclaration_0; }
		
		//'insert_data'
		public Keyword getINSERTInsert_dataKeyword_0_0() { return cINSERTInsert_dataKeyword_0_0; }
		
		//COMP='math_computation'
		public EnumLiteralDeclaration getCOMPEnumLiteralDeclaration_1() { return cCOMPEnumLiteralDeclaration_1; }
		
		//'math_computation'
		public Keyword getCOMPMath_computationKeyword_1_0() { return cCOMPMath_computationKeyword_1_0; }
		
		//SEARCH='search'
		public EnumLiteralDeclaration getSEARCHEnumLiteralDeclaration_2() { return cSEARCHEnumLiteralDeclaration_2; }
		
		//'search'
		public Keyword getSEARCHSearchKeyword_2_0() { return cSEARCHSearchKeyword_2_0; }
		
		//ANONYMIZATION='anonymization'
		public EnumLiteralDeclaration getANONYMIZATIONEnumLiteralDeclaration_3() { return cANONYMIZATIONEnumLiteralDeclaration_3; }
		
		//'anonymization'
		public Keyword getANONYMIZATIONAnonymizationKeyword_3_0() { return cANONYMIZATIONAnonymizationKeyword_3_0; }
		
		//ACCESS='access_control'
		public EnumLiteralDeclaration getACCESSEnumLiteralDeclaration_4() { return cACCESSEnumLiteralDeclaration_4; }
		
		//'access_control'
		public Keyword getACCESSAccess_controlKeyword_4_0() { return cACCESSAccess_controlKeyword_4_0; }
		
		//PERMISSION='permission_release'
		public EnumLiteralDeclaration getPERMISSIONEnumLiteralDeclaration_5() { return cPERMISSIONEnumLiteralDeclaration_5; }
		
		//'permission_release'
		public Keyword getPERMISSIONPermission_releaseKeyword_5_0() { return cPERMISSIONPermission_releaseKeyword_5_0; }
	}
	public class SecTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.SecType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUBLICPublicKeyword_0_0 = (Keyword)cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPRIVATEPrivateKeyword_1_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SecType:
		//	PUBLIC='public' | PRIVATE='private';
		public EnumRule getRule() { return rule; }
		
		//PUBLIC='public' | PRIVATE='private'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PUBLIC='public'
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() { return cPUBLICEnumLiteralDeclaration_0; }
		
		//'public'
		public Keyword getPUBLICPublicKeyword_0_0() { return cPUBLICPublicKeyword_0_0; }
		
		//PRIVATE='private'
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_1() { return cPRIVATEEnumLiteralDeclaration_1; }
		
		//'private'
		public Keyword getPRIVATEPrivateKeyword_1_0() { return cPRIVATEPrivateKeyword_1_0; }
	}
	public class BasicTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.BasicType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINTINTKeyword_0_0 = (Keyword)cINTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDOUBLEDOUBLEKeyword_1_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBOOLEANBOOLEANKeyword_2_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSTRINGSTRINGKeyword_3_0 = (Keyword)cSTRINGEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cENCRYPTEDEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cENCRYPTEDENCRYPTEDKeyword_4_0 = (Keyword)cENCRYPTEDEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum BasicType:
		//	INT | DOUBLE | BOOLEAN | STRING | ENCRYPTED;
		public EnumRule getRule() { return rule; }
		
		//INT | DOUBLE | BOOLEAN | STRING | ENCRYPTED
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_0() { return cINTEnumLiteralDeclaration_0; }
		
		//"INT"
		public Keyword getINTINTKeyword_0_0() { return cINTINTKeyword_0_0; }
		
		//DOUBLE
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_1() { return cDOUBLEEnumLiteralDeclaration_1; }
		
		//"DOUBLE"
		public Keyword getDOUBLEDOUBLEKeyword_1_0() { return cDOUBLEDOUBLEKeyword_1_0; }
		
		//BOOLEAN
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_2() { return cBOOLEANEnumLiteralDeclaration_2; }
		
		//"BOOLEAN"
		public Keyword getBOOLEANBOOLEANKeyword_2_0() { return cBOOLEANBOOLEANKeyword_2_0; }
		
		//STRING
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_3() { return cSTRINGEnumLiteralDeclaration_3; }
		
		//"STRING"
		public Keyword getSTRINGSTRINGKeyword_3_0() { return cSTRINGSTRINGKeyword_3_0; }
		
		//ENCRYPTED
		public EnumLiteralDeclaration getENCRYPTEDEnumLiteralDeclaration_4() { return cENCRYPTEDEnumLiteralDeclaration_4; }
		
		//"ENCRYPTED"
		public Keyword getENCRYPTEDENCRYPTEDKeyword_4_0() { return cENCRYPTEDENCRYPTEDKeyword_4_0; }
	}
	
	private final SmcElements pSmc;
	private final BlockSMCElements pBlockSMC;
	private final BlockTypeElements eBlockType;
	private final MainSMCElements pMainSMC;
	private final CommandElements pCommand;
	private final ReturnElements pReturn;
	private final ParamDeclElements pParamDecl;
	private final InvocationVoidElements pInvocationVoid;
	private final BlockElements pBlock;
	private final PrintElements pPrint;
	private final WhileElements pWhile;
	private final IfThenElseElements pIfThenElse;
	private final VariableDeclElements pVariableDecl;
	private final SecTypeElements eSecType;
	private final BasicTypeElements eBasicType;
	private final VariableAssignmentElements pVariableAssignment;
	private final AbstractAssignmentElements pAbstractAssignment;
	private final DownloadElements pDownload;
	private final DatabaseElements pDatabase;
	private final ClientElements pClient;
	private final ExpressionElements pExpression;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final PlusOrMinusElements pPlusOrMinus;
	private final MulOrDivElements pMulOrDiv;
	private final PrimaryElements pPrimary;
	private final AtomicElements pAtomic;
	private final TupleElements pTuple;
	private final ListElements pList;
	private final DictElements pDict;
	private final InvocationElements pInvocation;
	private final FunctionsElements pFunctions;
	private final ComputationElements pComputation;
	private final MultiplicationElements pMultiplication;
	private final MedianElements pMedian;
	private final WeightedAvgElements pWeightedAvg;
	private final AverageElements pAverage;
	private final CountElements pCount;
	private final AccessControlElements pAccessControl;
	private final BellLapadulaElements pBellLapadula;
	private final CoveredElements pCovered;
	private final SearchElements pSearch;
	private final BloomFilterElements pBloomFilter;
	private final CheckTableElements pCheckTable;
	private final AddValuesElements pAddValues;
	private final CreateTableElements pCreateTable;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tINT;
	private final TerminalRule tDATE;
	private final TerminalRule tTIME;
	private final TerminalRule tREAL;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SmcGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSmc = new SmcElements();
		this.pBlockSMC = new BlockSMCElements();
		this.eBlockType = new BlockTypeElements();
		this.pMainSMC = new MainSMCElements();
		this.pCommand = new CommandElements();
		this.pReturn = new ReturnElements();
		this.pParamDecl = new ParamDeclElements();
		this.pInvocationVoid = new InvocationVoidElements();
		this.pBlock = new BlockElements();
		this.pPrint = new PrintElements();
		this.pWhile = new WhileElements();
		this.pIfThenElse = new IfThenElseElements();
		this.pVariableDecl = new VariableDeclElements();
		this.eSecType = new SecTypeElements();
		this.eBasicType = new BasicTypeElements();
		this.pVariableAssignment = new VariableAssignmentElements();
		this.pAbstractAssignment = new AbstractAssignmentElements();
		this.pDownload = new DownloadElements();
		this.pDatabase = new DatabaseElements();
		this.pClient = new ClientElements();
		this.pExpression = new ExpressionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pMulOrDiv = new MulOrDivElements();
		this.pPrimary = new PrimaryElements();
		this.pAtomic = new AtomicElements();
		this.pTuple = new TupleElements();
		this.pList = new ListElements();
		this.pDict = new DictElements();
		this.pInvocation = new InvocationElements();
		this.pFunctions = new FunctionsElements();
		this.pComputation = new ComputationElements();
		this.pMultiplication = new MultiplicationElements();
		this.pMedian = new MedianElements();
		this.pWeightedAvg = new WeightedAvgElements();
		this.pAverage = new AverageElements();
		this.pCount = new CountElements();
		this.pAccessControl = new AccessControlElements();
		this.pBellLapadula = new BellLapadulaElements();
		this.pCovered = new CoveredElements();
		this.pSearch = new SearchElements();
		this.pBloomFilter = new BloomFilterElements();
		this.pCheckTable = new CheckTableElements();
		this.pAddValues = new AddValuesElements();
		this.pCreateTable = new CreateTableElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.BOOLEAN");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.INT");
		this.tDATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.DATE");
		this.tTIME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.TIME");
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.REAL");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "soton.cyber.smcaas.smc.Smc.SL_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("soton.cyber.smcaas.smc.Smc".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Smc:
	//	blocks+=BlockSMC* & main=MainSMC?;
	public SmcElements getSmcAccess() {
		return pSmc;
	}
	
	public ParserRule getSmcRule() {
		return getSmcAccess().getRule();
	}
	
	//BlockSMC:
	//	'block' type=BlockType name=ID '=' 'new' '(' ')' ';';
	public BlockSMCElements getBlockSMCAccess() {
		return pBlockSMC;
	}
	
	public ParserRule getBlockSMCRule() {
		return getBlockSMCAccess().getRule();
	}
	
	//enum BlockType:
	//	INSERT='insert_data' | COMP='math_computation' | SEARCH='search' | ANONYMIZATION='anonymization' |
	//	ACCESS='access_control' | PERMISSION='permission_release';
	public BlockTypeElements getBlockTypeAccess() {
		return eBlockType;
	}
	
	public EnumRule getBlockTypeRule() {
		return getBlockTypeAccess().getRule();
	}
	
	//MainSMC:
	//	'main' {MainSMC} '{'
	//	commands+=Command*
	//	'}';
	public MainSMCElements getMainSMCAccess() {
		return pMainSMC;
	}
	
	public ParserRule getMainSMCRule() {
		return getMainSMCAccess().getRule();
	}
	
	///* Command */ Command:
	//	Block | VariableDecl | VariableAssignment | IfThenElse | While | Print | InvocationVoid | ParamDecl | Return;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Return Command:
	//	{Return} 'return' ';';
	public ReturnElements getReturnAccess() {
		return pReturn;
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}
	
	//ParamDecl:
	//	'parameter' name=ID '=' '<' stype=SecType btype=BasicType '>' parName=STRING ';';
	public ParamDeclElements getParamDeclAccess() {
		return pParamDecl;
	}
	
	public ParserRule getParamDeclRule() {
		return getParamDeclAccess().getRule();
	}
	
	//InvocationVoid:
	//	call=Invocation ';';
	public InvocationVoidElements getInvocationVoidAccess() {
		return pInvocationVoid;
	}
	
	public ParserRule getInvocationVoidRule() {
		return getInvocationVoidAccess().getRule();
	}
	
	//Block Command:
	//	{Block} '{' commands+=Command* '}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Print:
	//	'print' '(' value=Expression ')' ';';
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	//While:
	//	'while' '(' condition=Expression ')' body=Command;
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//IfThenElse:
	//	'if' '(' condition=Expression ')' thenBrach=Command (=> 'else' elseBranch=Command)?;
	public IfThenElseElements getIfThenElseAccess() {
		return pIfThenElse;
	}
	
	public ParserRule getIfThenElseRule() {
		return getIfThenElseAccess().getRule();
	}
	
	//VariableDecl:
	//	'var' visibility=SecType type=BasicType (array?='[' length=INT? ']')? name=ID ('=' option=AbstractAssignment)? ';';
	public VariableDeclElements getVariableDeclAccess() {
		return pVariableDecl;
	}
	
	public ParserRule getVariableDeclRule() {
		return getVariableDeclAccess().getRule();
	}
	
	//enum SecType:
	//	PUBLIC='public' | PRIVATE='private';
	public SecTypeElements getSecTypeAccess() {
		return eSecType;
	}
	
	public EnumRule getSecTypeRule() {
		return getSecTypeAccess().getRule();
	}
	
	//enum BasicType:
	//	INT | DOUBLE | BOOLEAN | STRING | ENCRYPTED;
	public BasicTypeElements getBasicTypeAccess() {
		return eBasicType;
	}
	
	public EnumRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}
	
	//VariableAssignment:
	//	var=[VariableDecl] '=' option=AbstractAssignment ';';
	public VariableAssignmentElements getVariableAssignmentAccess() {
		return pVariableAssignment;
	}
	
	public ParserRule getVariableAssignmentRule() {
		return getVariableAssignmentAccess().getRule();
	}
	
	//AbstractAssignment:
	//	Expression | Download;
	public AbstractAssignmentElements getAbstractAssignmentAccess() {
		return pAbstractAssignment;
	}
	
	public ParserRule getAbstractAssignmentRule() {
		return getAbstractAssignmentAccess().getRule();
	}
	
	//Download:
	//	Client | Database;
	public DownloadElements getDownloadAccess() {
		return pDownload;
	}
	
	public ParserRule getDownloadRule() {
		return getDownloadAccess().getRule();
	}
	
	//Database:
	//	'retrieveFromDB' '(' tbl=Atomic ',' clm=STRING ')';
	public DatabaseElements getDatabaseAccess() {
		return pDatabase;
	}
	
	public ParserRule getDatabaseRule() {
		return getDatabaseAccess().getRule();
	}
	
	//Client:
	//	'retrieveFromClient' '(' arg=STRING ')';
	public ClientElements getClientAccess() {
		return pClient;
	}
	
	public ParserRule getClientRule() {
		return getClientAccess().getRule();
	}
	
	///* Expression */ Expression:
	//	Or;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Or Expression:
	//	And ({Or.left=current} "||" right=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And Expression:
	//	Equality ({And.left=current} "&&" right=Equality)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Equality Expression:
	//	Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//Comparison Expression:
	//	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//PlusOrMinus Expression:
	//	MulOrDiv ({PlusOrMinus.left=current} op=('+' | '-') right=MulOrDiv)*;
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//MulOrDiv Expression:
	//	Primary ({MulOrDiv.left=current} op=('*' | '/') right=Primary)*;
	public MulOrDivElements getMulOrDivAccess() {
		return pMulOrDiv;
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}
	
	//Primary Expression:
	//	'(' Expression ')' | {Not} "!" expression=Primary | Atomic;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Atomic Expression:
	//	{IntLiteral} value=INT
	//	| {DoubleLiteral} value=REAL
	//	| {BooleanLiteral} value=BOOLEAN
	//	| {StringLiteral} value=STRING
	//	| {DateLiteral} value=DATE
	//	| {TimeLiteral} value=TIME
	//	| {VariableRef} variable=[VariableDecl] | Tuple
	//	| List
	//	| Dict
	//	| Invocation;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//Tuple:
	//	'tuple' '<' arg1=Atomic ',' arg2=Atomic '>';
	public TupleElements getTupleAccess() {
		return pTuple;
	}
	
	public ParserRule getTupleRule() {
		return getTupleAccess().getRule();
	}
	
	//List:
	//	'list' '(' (args+=Atomic (',' args+=Atomic)*) ')';
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}
	
	//Dict:
	//	'dict' '(' key=Atomic ',' value=[List] ')';
	public DictElements getDictAccess() {
		return pDict;
	}
	
	public ParserRule getDictRule() {
		return getDictAccess().getRule();
	}
	
	//Invocation:
	//	blockName=[BlockSMC] '.' funcName=Functions;
	public InvocationElements getInvocationAccess() {
		return pInvocation;
	}
	
	public ParserRule getInvocationRule() {
		return getInvocationAccess().getRule();
	}
	
	//Functions:
	//	CreateTable | CheckTable | AddValues | BloomFilter | Search | AccessControl | Computation;
	public FunctionsElements getFunctionsAccess() {
		return pFunctions;
	}
	
	public ParserRule getFunctionsRule() {
		return getFunctionsAccess().getRule();
	}
	
	///* Block Computation */ Computation:
	//	Count | Average | WeightedAvg | Median | Multiplication;
	public ComputationElements getComputationAccess() {
		return pComputation;
	}
	
	public ParserRule getComputationRule() {
		return getComputationAccess().getRule();
	}
	
	//Multiplication:
	//	'multiplication' '(' x=[VariableDecl] ',' y=[VariableDecl] ')';
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Median:
	//	'median' '(' array=[VariableDecl] ')';
	public MedianElements getMedianAccess() {
		return pMedian;
	}
	
	public ParserRule getMedianRule() {
		return getMedianAccess().getRule();
	}
	
	//WeightedAvg:
	//	'w_avg' '(' weights=[VariableDecl] ',' elems=[VariableDecl] ')';
	public WeightedAvgElements getWeightedAvgAccess() {
		return pWeightedAvg;
	}
	
	public ParserRule getWeightedAvgRule() {
		return getWeightedAvgAccess().getRule();
	}
	
	//Average:
	//	'avg' '(' array=[VariableDecl] ')';
	public AverageElements getAverageAccess() {
		return pAverage;
	}
	
	public ParserRule getAverageRule() {
		return getAverageAccess().getRule();
	}
	
	//Count:
	//	'count' '(' array=[VariableDecl] ')';
	public CountElements getCountAccess() {
		return pCount;
	}
	
	public ParserRule getCountRule() {
		return getCountAccess().getRule();
	}
	
	///* Block Access Control */ AccessControl:
	//	Covered | BellLapadula;
	public AccessControlElements getAccessControlAccess() {
		return pAccessControl;
	}
	
	public ParserRule getAccessControlRule() {
		return getAccessControlAccess().getRule();
	}
	
	//BellLapadula:
	//	'accessControlBLP' '(' (cur=[VariableDecl] ',')? mode=STRING ',' c_lvls=[VariableDecl] ',' v_lvl=[VariableDecl] ')';
	public BellLapadulaElements getBellLapadulaAccess() {
		return pBellLapadula;
	}
	
	public ParserRule getBellLapadulaRule() {
		return getBellLapadulaAccess().getRule();
	}
	
	//Covered:
	//	'accessControlCovered' '(' match=[VariableDecl] ',' covered=[VariableDecl] ',' c_lvls=[VariableDecl] ','
	//	v_lvl=[VariableDecl] ')';
	public CoveredElements getCoveredAccess() {
		return pCovered;
	}
	
	public ParserRule getCoveredRule() {
		return getCoveredAccess().getRule();
	}
	
	///* Block Search */ Search:
	//	'search' '(' tblname=[VariableDecl] ',' column=STRING ',' keyword=[VariableDecl] ')';
	public SearchElements getSearchAccess() {
		return pSearch;
	}
	
	public ParserRule getSearchRule() {
		return getSearchAccess().getRule();
	}
	
	//BloomFilter:
	//	'bloomFilter' '(' pre=[VariableDecl] ',' post=[VariableDecl] ')';
	public BloomFilterElements getBloomFilterAccess() {
		return pBloomFilter;
	}
	
	public ParserRule getBloomFilterRule() {
		return getBloomFilterAccess().getRule();
	}
	
	///* Block Insert Data */ CheckTable:
	//	'checkDataset' '(' tblname=[VariableDecl] ')';
	public CheckTableElements getCheckTableAccess() {
		return pCheckTable;
	}
	
	public ParserRule getCheckTableRule() {
		return getCheckTableAccess().getRule();
	}
	
	//AddValues:
	//	'addValues' '(' tblname=[VariableDecl] (',' args+=[VariableDecl] (',' args+=[VariableDecl])*)+ ')';
	public AddValuesElements getAddValuesAccess() {
		return pAddValues;
	}
	
	public ParserRule getAddValuesRule() {
		return getAddValuesAccess().getRule();
	}
	
	//CreateTable:
	//	'createDataset' '(' tblname=[VariableDecl] (',' params+=[ParamDecl] (',' params+=[ParamDecl])*)+ ')';
	public CreateTableElements getCreateTableAccess() {
		return pCreateTable;
	}
	
	public ParserRule getCreateTableRule() {
		return getCreateTableAccess().getRule();
	}
	
	//terminal BOOLEAN returns ecore::EBoolean:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//@ Override terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal DATE:
	//	INT '/' INT '/' INT;
	public TerminalRule getDATERule() {
		return tDATE;
	}
	
	//terminal TIME:
	//	INT ':' INT ':' INT;
	public TerminalRule getTIMERule() {
		return tTIME;
	}
	
	//terminal REAL returns ecore::EDouble:
	//	('+' | '-')? '0'..'9'* ('.' '0'..'9'+)?;
	public TerminalRule getREALRule() {
		return tREAL;
	}
	
	//@ Override terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"' | '/'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | "'" | '/'))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//@ Override terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//@ Override terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
