/**
 * generated by Xtext 2.12.0
 */
package soton.cyber.smcaas.smc.smc.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import soton.cyber.smcaas.smc.smc.Multiplication;
import soton.cyber.smcaas.smc.smc.SmcPackage;
import soton.cyber.smcaas.smc.smc.VariableDecl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Multiplication</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link soton.cyber.smcaas.smc.smc.impl.MultiplicationImpl#getX <em>X</em>}</li>
 *   <li>{@link soton.cyber.smcaas.smc.smc.impl.MultiplicationImpl#getY <em>Y</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MultiplicationImpl extends ComputationImpl implements Multiplication
{
  /**
   * The cached value of the '{@link #getX() <em>X</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getX()
   * @generated
   * @ordered
   */
  protected VariableDecl x;

  /**
   * The cached value of the '{@link #getY() <em>Y</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getY()
   * @generated
   * @ordered
   */
  protected VariableDecl y;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MultiplicationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SmcPackage.Literals.MULTIPLICATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableDecl getX()
  {
    if (x != null && x.eIsProxy())
    {
      InternalEObject oldX = (InternalEObject)x;
      x = (VariableDecl)eResolveProxy(oldX);
      if (x != oldX)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SmcPackage.MULTIPLICATION__X, oldX, x));
      }
    }
    return x;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableDecl basicGetX()
  {
    return x;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setX(VariableDecl newX)
  {
    VariableDecl oldX = x;
    x = newX;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmcPackage.MULTIPLICATION__X, oldX, x));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableDecl getY()
  {
    if (y != null && y.eIsProxy())
    {
      InternalEObject oldY = (InternalEObject)y;
      y = (VariableDecl)eResolveProxy(oldY);
      if (y != oldY)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SmcPackage.MULTIPLICATION__Y, oldY, y));
      }
    }
    return y;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableDecl basicGetY()
  {
    return y;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setY(VariableDecl newY)
  {
    VariableDecl oldY = y;
    y = newY;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmcPackage.MULTIPLICATION__Y, oldY, y));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SmcPackage.MULTIPLICATION__X:
        if (resolve) return getX();
        return basicGetX();
      case SmcPackage.MULTIPLICATION__Y:
        if (resolve) return getY();
        return basicGetY();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SmcPackage.MULTIPLICATION__X:
        setX((VariableDecl)newValue);
        return;
      case SmcPackage.MULTIPLICATION__Y:
        setY((VariableDecl)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SmcPackage.MULTIPLICATION__X:
        setX((VariableDecl)null);
        return;
      case SmcPackage.MULTIPLICATION__Y:
        setY((VariableDecl)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SmcPackage.MULTIPLICATION__X:
        return x != null;
      case SmcPackage.MULTIPLICATION__Y:
        return y != null;
    }
    return super.eIsSet(featureID);
  }

} //MultiplicationImpl
