/**
 * generated by Xtext 2.12.0
 */
package soton.cyber.smcaas.smc.smc.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import soton.cyber.smcaas.smc.smc.Command;
import soton.cyber.smcaas.smc.smc.Expression;
import soton.cyber.smcaas.smc.smc.IfThenElse;
import soton.cyber.smcaas.smc.smc.SmcPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>If Then Else</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link soton.cyber.smcaas.smc.smc.impl.IfThenElseImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link soton.cyber.smcaas.smc.smc.impl.IfThenElseImpl#getThenBrach <em>Then Brach</em>}</li>
 *   <li>{@link soton.cyber.smcaas.smc.smc.impl.IfThenElseImpl#getElseBranch <em>Else Branch</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IfThenElseImpl extends CommandImpl implements IfThenElse
{
  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected Expression condition;

  /**
   * The cached value of the '{@link #getThenBrach() <em>Then Brach</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThenBrach()
   * @generated
   * @ordered
   */
  protected Command thenBrach;

  /**
   * The cached value of the '{@link #getElseBranch() <em>Else Branch</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElseBranch()
   * @generated
   * @ordered
   */
  protected Command elseBranch;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IfThenElseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SmcPackage.Literals.IF_THEN_ELSE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(Expression newCondition, NotificationChain msgs)
  {
    Expression oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmcPackage.IF_THEN_ELSE__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCondition(Expression newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmcPackage.IF_THEN_ELSE__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmcPackage.IF_THEN_ELSE__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmcPackage.IF_THEN_ELSE__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Command getThenBrach()
  {
    return thenBrach;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetThenBrach(Command newThenBrach, NotificationChain msgs)
  {
    Command oldThenBrach = thenBrach;
    thenBrach = newThenBrach;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmcPackage.IF_THEN_ELSE__THEN_BRACH, oldThenBrach, newThenBrach);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setThenBrach(Command newThenBrach)
  {
    if (newThenBrach != thenBrach)
    {
      NotificationChain msgs = null;
      if (thenBrach != null)
        msgs = ((InternalEObject)thenBrach).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmcPackage.IF_THEN_ELSE__THEN_BRACH, null, msgs);
      if (newThenBrach != null)
        msgs = ((InternalEObject)newThenBrach).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmcPackage.IF_THEN_ELSE__THEN_BRACH, null, msgs);
      msgs = basicSetThenBrach(newThenBrach, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmcPackage.IF_THEN_ELSE__THEN_BRACH, newThenBrach, newThenBrach));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Command getElseBranch()
  {
    return elseBranch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElseBranch(Command newElseBranch, NotificationChain msgs)
  {
    Command oldElseBranch = elseBranch;
    elseBranch = newElseBranch;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmcPackage.IF_THEN_ELSE__ELSE_BRANCH, oldElseBranch, newElseBranch);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setElseBranch(Command newElseBranch)
  {
    if (newElseBranch != elseBranch)
    {
      NotificationChain msgs = null;
      if (elseBranch != null)
        msgs = ((InternalEObject)elseBranch).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmcPackage.IF_THEN_ELSE__ELSE_BRANCH, null, msgs);
      if (newElseBranch != null)
        msgs = ((InternalEObject)newElseBranch).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmcPackage.IF_THEN_ELSE__ELSE_BRANCH, null, msgs);
      msgs = basicSetElseBranch(newElseBranch, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SmcPackage.IF_THEN_ELSE__ELSE_BRANCH, newElseBranch, newElseBranch));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SmcPackage.IF_THEN_ELSE__CONDITION:
        return basicSetCondition(null, msgs);
      case SmcPackage.IF_THEN_ELSE__THEN_BRACH:
        return basicSetThenBrach(null, msgs);
      case SmcPackage.IF_THEN_ELSE__ELSE_BRANCH:
        return basicSetElseBranch(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SmcPackage.IF_THEN_ELSE__CONDITION:
        return getCondition();
      case SmcPackage.IF_THEN_ELSE__THEN_BRACH:
        return getThenBrach();
      case SmcPackage.IF_THEN_ELSE__ELSE_BRANCH:
        return getElseBranch();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SmcPackage.IF_THEN_ELSE__CONDITION:
        setCondition((Expression)newValue);
        return;
      case SmcPackage.IF_THEN_ELSE__THEN_BRACH:
        setThenBrach((Command)newValue);
        return;
      case SmcPackage.IF_THEN_ELSE__ELSE_BRANCH:
        setElseBranch((Command)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SmcPackage.IF_THEN_ELSE__CONDITION:
        setCondition((Expression)null);
        return;
      case SmcPackage.IF_THEN_ELSE__THEN_BRACH:
        setThenBrach((Command)null);
        return;
      case SmcPackage.IF_THEN_ELSE__ELSE_BRANCH:
        setElseBranch((Command)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SmcPackage.IF_THEN_ELSE__CONDITION:
        return condition != null;
      case SmcPackage.IF_THEN_ELSE__THEN_BRACH:
        return thenBrach != null;
      case SmcPackage.IF_THEN_ELSE__ELSE_BRANCH:
        return elseBranch != null;
    }
    return super.eIsSet(featureID);
  }

} //IfThenElseImpl
