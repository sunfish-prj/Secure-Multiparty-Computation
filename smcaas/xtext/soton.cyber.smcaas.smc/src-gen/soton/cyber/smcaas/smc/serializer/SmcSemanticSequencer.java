/*
 * generated by Xtext 2.12.0
 */
package soton.cyber.smcaas.smc.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import soton.cyber.smcaas.smc.services.SmcGrammarAccess;
import soton.cyber.smcaas.smc.smc.And;
import soton.cyber.smcaas.smc.smc.Block;
import soton.cyber.smcaas.smc.smc.BlockSMC;
import soton.cyber.smcaas.smc.smc.BooleanLiteral;
import soton.cyber.smcaas.smc.smc.Comparison;
import soton.cyber.smcaas.smc.smc.DateLiteral;
import soton.cyber.smcaas.smc.smc.DoubleLiteral;
import soton.cyber.smcaas.smc.smc.Equality;
import soton.cyber.smcaas.smc.smc.IfThenElse;
import soton.cyber.smcaas.smc.smc.IntLiteral;
import soton.cyber.smcaas.smc.smc.Invocation;
import soton.cyber.smcaas.smc.smc.List;
import soton.cyber.smcaas.smc.smc.MainSMC;
import soton.cyber.smcaas.smc.smc.Minus;
import soton.cyber.smcaas.smc.smc.MulOrDiv;
import soton.cyber.smcaas.smc.smc.Not;
import soton.cyber.smcaas.smc.smc.Or;
import soton.cyber.smcaas.smc.smc.Plus;
import soton.cyber.smcaas.smc.smc.Print;
import soton.cyber.smcaas.smc.smc.Smc;
import soton.cyber.smcaas.smc.smc.SmcPackage;
import soton.cyber.smcaas.smc.smc.StringLiteral;
import soton.cyber.smcaas.smc.smc.TimeLiteral;
import soton.cyber.smcaas.smc.smc.VariableAssignment;
import soton.cyber.smcaas.smc.smc.VariableDecl;
import soton.cyber.smcaas.smc.smc.VariableRef;
import soton.cyber.smcaas.smc.smc.While;

@SuppressWarnings("all")
public class SmcSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SmcGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SmcPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SmcPackage.AND:
				sequence_And(context, (And) semanticObject); 
				return; 
			case SmcPackage.BLOCK:
				sequence_Block(context, (Block) semanticObject); 
				return; 
			case SmcPackage.BLOCK_SMC:
				sequence_BlockSMC(context, (BlockSMC) semanticObject); 
				return; 
			case SmcPackage.BOOLEAN_LITERAL:
				sequence_Atomic(context, (BooleanLiteral) semanticObject); 
				return; 
			case SmcPackage.COMPARISON:
				sequence_Comparison(context, (Comparison) semanticObject); 
				return; 
			case SmcPackage.DATE_LITERAL:
				sequence_Atomic(context, (DateLiteral) semanticObject); 
				return; 
			case SmcPackage.DOUBLE_LITERAL:
				sequence_Atomic(context, (DoubleLiteral) semanticObject); 
				return; 
			case SmcPackage.EQUALITY:
				sequence_Equality(context, (Equality) semanticObject); 
				return; 
			case SmcPackage.IF_THEN_ELSE:
				sequence_IfThenElse(context, (IfThenElse) semanticObject); 
				return; 
			case SmcPackage.INT_LITERAL:
				sequence_Atomic(context, (IntLiteral) semanticObject); 
				return; 
			case SmcPackage.INVOCATION:
				sequence_Invocation(context, (Invocation) semanticObject); 
				return; 
			case SmcPackage.LIST:
				sequence_List(context, (List) semanticObject); 
				return; 
			case SmcPackage.MAIN_SMC:
				sequence_MainSMC(context, (MainSMC) semanticObject); 
				return; 
			case SmcPackage.MINUS:
				sequence_PlusOrMinus(context, (Minus) semanticObject); 
				return; 
			case SmcPackage.MUL_OR_DIV:
				sequence_MulOrDiv(context, (MulOrDiv) semanticObject); 
				return; 
			case SmcPackage.NOT:
				sequence_Primary(context, (Not) semanticObject); 
				return; 
			case SmcPackage.OR:
				sequence_Or(context, (Or) semanticObject); 
				return; 
			case SmcPackage.PLUS:
				sequence_PlusOrMinus(context, (Plus) semanticObject); 
				return; 
			case SmcPackage.PRINT:
				sequence_Print(context, (Print) semanticObject); 
				return; 
			case SmcPackage.SMC:
				sequence_Smc(context, (Smc) semanticObject); 
				return; 
			case SmcPackage.STRING_LITERAL:
				sequence_Atomic(context, (StringLiteral) semanticObject); 
				return; 
			case SmcPackage.TIME_LITERAL:
				sequence_Atomic(context, (TimeLiteral) semanticObject); 
				return; 
			case SmcPackage.VARIABLE_ASSIGNMENT:
				sequence_VariableAssignment(context, (VariableAssignment) semanticObject); 
				return; 
			case SmcPackage.VARIABLE_DECL:
				sequence_VariableDecl(context, (VariableDecl) semanticObject); 
				return; 
			case SmcPackage.VARIABLE_REF:
				sequence_Atomic(context, (VariableRef) semanticObject); 
				return; 
			case SmcPackage.WHILE:
				sequence_While(context, (While) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Expression returns And
	 *     Or returns And
	 *     Or.Or_1_0 returns And
	 *     And returns And
	 *     And.And_1_0 returns And
	 *     Equality returns And
	 *     Equality.Equality_1_0 returns And
	 *     Comparison returns And
	 *     Comparison.Comparison_1_0 returns And
	 *     PlusOrMinus returns And
	 *     PlusOrMinus.Plus_1_0_0_0 returns And
	 *     PlusOrMinus.Minus_1_0_1_0 returns And
	 *     MulOrDiv returns And
	 *     MulOrDiv.MulOrDiv_1_0 returns And
	 *     Primary returns And
	 *
	 * Constraint:
	 *     (left=And_And_1_0 right=Equality)
	 */
	protected void sequence_And(ISerializationContext context, And semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmcPackage.Literals.AND__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmcPackage.Literals.AND__LEFT));
			if (transientValues.isValueTransient(semanticObject, SmcPackage.Literals.AND__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmcPackage.Literals.AND__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAndAccess().getAndLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns BooleanLiteral
	 *     Or returns BooleanLiteral
	 *     Or.Or_1_0 returns BooleanLiteral
	 *     And returns BooleanLiteral
	 *     And.And_1_0 returns BooleanLiteral
	 *     Equality returns BooleanLiteral
	 *     Equality.Equality_1_0 returns BooleanLiteral
	 *     Comparison returns BooleanLiteral
	 *     Comparison.Comparison_1_0 returns BooleanLiteral
	 *     PlusOrMinus returns BooleanLiteral
	 *     PlusOrMinus.Plus_1_0_0_0 returns BooleanLiteral
	 *     PlusOrMinus.Minus_1_0_1_0 returns BooleanLiteral
	 *     MulOrDiv returns BooleanLiteral
	 *     MulOrDiv.MulOrDiv_1_0 returns BooleanLiteral
	 *     Primary returns BooleanLiteral
	 *     Atomic returns BooleanLiteral
	 *
	 * Constraint:
	 *     value=BOOLEAN
	 */
	protected void sequence_Atomic(ISerializationContext context, BooleanLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmcPackage.Literals.BOOLEAN_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmcPackage.Literals.BOOLEAN_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getValueBOOLEANTerminalRuleCall_2_1_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns DateLiteral
	 *     Or returns DateLiteral
	 *     Or.Or_1_0 returns DateLiteral
	 *     And returns DateLiteral
	 *     And.And_1_0 returns DateLiteral
	 *     Equality returns DateLiteral
	 *     Equality.Equality_1_0 returns DateLiteral
	 *     Comparison returns DateLiteral
	 *     Comparison.Comparison_1_0 returns DateLiteral
	 *     PlusOrMinus returns DateLiteral
	 *     PlusOrMinus.Plus_1_0_0_0 returns DateLiteral
	 *     PlusOrMinus.Minus_1_0_1_0 returns DateLiteral
	 *     MulOrDiv returns DateLiteral
	 *     MulOrDiv.MulOrDiv_1_0 returns DateLiteral
	 *     Primary returns DateLiteral
	 *     Atomic returns DateLiteral
	 *
	 * Constraint:
	 *     value=DATE
	 */
	protected void sequence_Atomic(ISerializationContext context, DateLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmcPackage.Literals.DATE_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmcPackage.Literals.DATE_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getValueDATETerminalRuleCall_4_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns DoubleLiteral
	 *     Or returns DoubleLiteral
	 *     Or.Or_1_0 returns DoubleLiteral
	 *     And returns DoubleLiteral
	 *     And.And_1_0 returns DoubleLiteral
	 *     Equality returns DoubleLiteral
	 *     Equality.Equality_1_0 returns DoubleLiteral
	 *     Comparison returns DoubleLiteral
	 *     Comparison.Comparison_1_0 returns DoubleLiteral
	 *     PlusOrMinus returns DoubleLiteral
	 *     PlusOrMinus.Plus_1_0_0_0 returns DoubleLiteral
	 *     PlusOrMinus.Minus_1_0_1_0 returns DoubleLiteral
	 *     MulOrDiv returns DoubleLiteral
	 *     MulOrDiv.MulOrDiv_1_0 returns DoubleLiteral
	 *     Primary returns DoubleLiteral
	 *     Atomic returns DoubleLiteral
	 *
	 * Constraint:
	 *     value=REAL
	 */
	protected void sequence_Atomic(ISerializationContext context, DoubleLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmcPackage.Literals.DOUBLE_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmcPackage.Literals.DOUBLE_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getValueREALTerminalRuleCall_1_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns IntLiteral
	 *     Or returns IntLiteral
	 *     Or.Or_1_0 returns IntLiteral
	 *     And returns IntLiteral
	 *     And.And_1_0 returns IntLiteral
	 *     Equality returns IntLiteral
	 *     Equality.Equality_1_0 returns IntLiteral
	 *     Comparison returns IntLiteral
	 *     Comparison.Comparison_1_0 returns IntLiteral
	 *     PlusOrMinus returns IntLiteral
	 *     PlusOrMinus.Plus_1_0_0_0 returns IntLiteral
	 *     PlusOrMinus.Minus_1_0_1_0 returns IntLiteral
	 *     MulOrDiv returns IntLiteral
	 *     MulOrDiv.MulOrDiv_1_0 returns IntLiteral
	 *     Primary returns IntLiteral
	 *     Atomic returns IntLiteral
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_Atomic(ISerializationContext context, IntLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmcPackage.Literals.INT_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmcPackage.Literals.INT_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns StringLiteral
	 *     Or returns StringLiteral
	 *     Or.Or_1_0 returns StringLiteral
	 *     And returns StringLiteral
	 *     And.And_1_0 returns StringLiteral
	 *     Equality returns StringLiteral
	 *     Equality.Equality_1_0 returns StringLiteral
	 *     Comparison returns StringLiteral
	 *     Comparison.Comparison_1_0 returns StringLiteral
	 *     PlusOrMinus returns StringLiteral
	 *     PlusOrMinus.Plus_1_0_0_0 returns StringLiteral
	 *     PlusOrMinus.Minus_1_0_1_0 returns StringLiteral
	 *     MulOrDiv returns StringLiteral
	 *     MulOrDiv.MulOrDiv_1_0 returns StringLiteral
	 *     Primary returns StringLiteral
	 *     Atomic returns StringLiteral
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_Atomic(ISerializationContext context, StringLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmcPackage.Literals.STRING_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmcPackage.Literals.STRING_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getValueSTRINGTerminalRuleCall_3_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns TimeLiteral
	 *     Or returns TimeLiteral
	 *     Or.Or_1_0 returns TimeLiteral
	 *     And returns TimeLiteral
	 *     And.And_1_0 returns TimeLiteral
	 *     Equality returns TimeLiteral
	 *     Equality.Equality_1_0 returns TimeLiteral
	 *     Comparison returns TimeLiteral
	 *     Comparison.Comparison_1_0 returns TimeLiteral
	 *     PlusOrMinus returns TimeLiteral
	 *     PlusOrMinus.Plus_1_0_0_0 returns TimeLiteral
	 *     PlusOrMinus.Minus_1_0_1_0 returns TimeLiteral
	 *     MulOrDiv returns TimeLiteral
	 *     MulOrDiv.MulOrDiv_1_0 returns TimeLiteral
	 *     Primary returns TimeLiteral
	 *     Atomic returns TimeLiteral
	 *
	 * Constraint:
	 *     value=TIME
	 */
	protected void sequence_Atomic(ISerializationContext context, TimeLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmcPackage.Literals.TIME_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmcPackage.Literals.TIME_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getValueTIMETerminalRuleCall_5_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns VariableRef
	 *     Or returns VariableRef
	 *     Or.Or_1_0 returns VariableRef
	 *     And returns VariableRef
	 *     And.And_1_0 returns VariableRef
	 *     Equality returns VariableRef
	 *     Equality.Equality_1_0 returns VariableRef
	 *     Comparison returns VariableRef
	 *     Comparison.Comparison_1_0 returns VariableRef
	 *     PlusOrMinus returns VariableRef
	 *     PlusOrMinus.Plus_1_0_0_0 returns VariableRef
	 *     PlusOrMinus.Minus_1_0_1_0 returns VariableRef
	 *     MulOrDiv returns VariableRef
	 *     MulOrDiv.MulOrDiv_1_0 returns VariableRef
	 *     Primary returns VariableRef
	 *     Atomic returns VariableRef
	 *
	 * Constraint:
	 *     variable=[VariableDecl|ID]
	 */
	protected void sequence_Atomic(ISerializationContext context, VariableRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmcPackage.Literals.VARIABLE_REF__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmcPackage.Literals.VARIABLE_REF__VARIABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtomicAccess().getVariableVariableDeclIDTerminalRuleCall_6_1_0_1(), semanticObject.eGet(SmcPackage.Literals.VARIABLE_REF__VARIABLE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BlockSMC returns BlockSMC
	 *
	 * Constraint:
	 *     (type=BlockType name=ID (parameters+=Expression parameters+=Expression*)?)
	 */
	protected void sequence_BlockSMC(ISerializationContext context, BlockSMC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Block
	 *     Block returns Block
	 *
	 * Constraint:
	 *     commands+=Command*
	 */
	protected void sequence_Block(ISerializationContext context, Block semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Comparison
	 *     Or returns Comparison
	 *     Or.Or_1_0 returns Comparison
	 *     And returns Comparison
	 *     And.And_1_0 returns Comparison
	 *     Equality returns Comparison
	 *     Equality.Equality_1_0 returns Comparison
	 *     Comparison returns Comparison
	 *     Comparison.Comparison_1_0 returns Comparison
	 *     PlusOrMinus returns Comparison
	 *     PlusOrMinus.Plus_1_0_0_0 returns Comparison
	 *     PlusOrMinus.Minus_1_0_1_0 returns Comparison
	 *     MulOrDiv returns Comparison
	 *     MulOrDiv.MulOrDiv_1_0 returns Comparison
	 *     Primary returns Comparison
	 *
	 * Constraint:
	 *     (left=Comparison_Comparison_1_0 (op='>=' | op='<=' | op='>' | op='<') right=PlusOrMinus)
	 */
	protected void sequence_Comparison(ISerializationContext context, Comparison semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Equality
	 *     Or returns Equality
	 *     Or.Or_1_0 returns Equality
	 *     And returns Equality
	 *     And.And_1_0 returns Equality
	 *     Equality returns Equality
	 *     Equality.Equality_1_0 returns Equality
	 *     Comparison returns Equality
	 *     Comparison.Comparison_1_0 returns Equality
	 *     PlusOrMinus returns Equality
	 *     PlusOrMinus.Plus_1_0_0_0 returns Equality
	 *     PlusOrMinus.Minus_1_0_1_0 returns Equality
	 *     MulOrDiv returns Equality
	 *     MulOrDiv.MulOrDiv_1_0 returns Equality
	 *     Primary returns Equality
	 *
	 * Constraint:
	 *     (left=Equality_Equality_1_0 (op='==' | op='!=') right=Comparison)
	 */
	protected void sequence_Equality(ISerializationContext context, Equality semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns IfThenElse
	 *     IfThenElse returns IfThenElse
	 *
	 * Constraint:
	 *     (condition=Expression thenBrach=Command elseBranch=Command?)
	 */
	protected void sequence_IfThenElse(ISerializationContext context, IfThenElse semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Invocation
	 *     Expression returns Invocation
	 *     Or returns Invocation
	 *     Or.Or_1_0 returns Invocation
	 *     And returns Invocation
	 *     And.And_1_0 returns Invocation
	 *     Equality returns Invocation
	 *     Equality.Equality_1_0 returns Invocation
	 *     Comparison returns Invocation
	 *     Comparison.Comparison_1_0 returns Invocation
	 *     PlusOrMinus returns Invocation
	 *     PlusOrMinus.Plus_1_0_0_0 returns Invocation
	 *     PlusOrMinus.Minus_1_0_1_0 returns Invocation
	 *     MulOrDiv returns Invocation
	 *     MulOrDiv.MulOrDiv_1_0 returns Invocation
	 *     Primary returns Invocation
	 *     Atomic returns Invocation
	 *     Invocation returns Invocation
	 *
	 * Constraint:
	 *     (blockName=[BlockSMC|ID] function=ID (args+=Expression args+=Expression*)?)
	 */
	protected void sequence_Invocation(ISerializationContext context, Invocation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns List
	 *     Or returns List
	 *     Or.Or_1_0 returns List
	 *     And returns List
	 *     And.And_1_0 returns List
	 *     Equality returns List
	 *     Equality.Equality_1_0 returns List
	 *     Comparison returns List
	 *     Comparison.Comparison_1_0 returns List
	 *     PlusOrMinus returns List
	 *     PlusOrMinus.Plus_1_0_0_0 returns List
	 *     PlusOrMinus.Minus_1_0_1_0 returns List
	 *     MulOrDiv returns List
	 *     MulOrDiv.MulOrDiv_1_0 returns List
	 *     Primary returns List
	 *     Atomic returns List
	 *     List returns List
	 *
	 * Constraint:
	 *     (args+=Atomic args+=Atomic*)
	 */
	protected void sequence_List(ISerializationContext context, List semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MainSMC returns MainSMC
	 *
	 * Constraint:
	 *     commands+=Command*
	 */
	protected void sequence_MainSMC(ISerializationContext context, MainSMC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns MulOrDiv
	 *     Or returns MulOrDiv
	 *     Or.Or_1_0 returns MulOrDiv
	 *     And returns MulOrDiv
	 *     And.And_1_0 returns MulOrDiv
	 *     Equality returns MulOrDiv
	 *     Equality.Equality_1_0 returns MulOrDiv
	 *     Comparison returns MulOrDiv
	 *     Comparison.Comparison_1_0 returns MulOrDiv
	 *     PlusOrMinus returns MulOrDiv
	 *     PlusOrMinus.Plus_1_0_0_0 returns MulOrDiv
	 *     PlusOrMinus.Minus_1_0_1_0 returns MulOrDiv
	 *     MulOrDiv returns MulOrDiv
	 *     MulOrDiv.MulOrDiv_1_0 returns MulOrDiv
	 *     Primary returns MulOrDiv
	 *
	 * Constraint:
	 *     (left=MulOrDiv_MulOrDiv_1_0 (op='*' | op='/') right=Primary)
	 */
	protected void sequence_MulOrDiv(ISerializationContext context, MulOrDiv semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Or
	 *     Or returns Or
	 *     Or.Or_1_0 returns Or
	 *     And returns Or
	 *     And.And_1_0 returns Or
	 *     Equality returns Or
	 *     Equality.Equality_1_0 returns Or
	 *     Comparison returns Or
	 *     Comparison.Comparison_1_0 returns Or
	 *     PlusOrMinus returns Or
	 *     PlusOrMinus.Plus_1_0_0_0 returns Or
	 *     PlusOrMinus.Minus_1_0_1_0 returns Or
	 *     MulOrDiv returns Or
	 *     MulOrDiv.MulOrDiv_1_0 returns Or
	 *     Primary returns Or
	 *
	 * Constraint:
	 *     (left=Or_Or_1_0 right=And)
	 */
	protected void sequence_Or(ISerializationContext context, Or semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmcPackage.Literals.OR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmcPackage.Literals.OR__LEFT));
			if (transientValues.isValueTransient(semanticObject, SmcPackage.Literals.OR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmcPackage.Literals.OR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOrAccess().getOrLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Minus
	 *     Or returns Minus
	 *     Or.Or_1_0 returns Minus
	 *     And returns Minus
	 *     And.And_1_0 returns Minus
	 *     Equality returns Minus
	 *     Equality.Equality_1_0 returns Minus
	 *     Comparison returns Minus
	 *     Comparison.Comparison_1_0 returns Minus
	 *     PlusOrMinus returns Minus
	 *     PlusOrMinus.Plus_1_0_0_0 returns Minus
	 *     PlusOrMinus.Minus_1_0_1_0 returns Minus
	 *     MulOrDiv returns Minus
	 *     MulOrDiv.MulOrDiv_1_0 returns Minus
	 *     Primary returns Minus
	 *
	 * Constraint:
	 *     (left=PlusOrMinus_Minus_1_0_1_0 right=MulOrDiv)
	 */
	protected void sequence_PlusOrMinus(ISerializationContext context, Minus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmcPackage.Literals.MINUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmcPackage.Literals.MINUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, SmcPackage.Literals.MINUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmcPackage.Literals.MINUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getMinusLeftAction_1_0_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getRightMulOrDivParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Plus
	 *     Or returns Plus
	 *     Or.Or_1_0 returns Plus
	 *     And returns Plus
	 *     And.And_1_0 returns Plus
	 *     Equality returns Plus
	 *     Equality.Equality_1_0 returns Plus
	 *     Comparison returns Plus
	 *     Comparison.Comparison_1_0 returns Plus
	 *     PlusOrMinus returns Plus
	 *     PlusOrMinus.Plus_1_0_0_0 returns Plus
	 *     PlusOrMinus.Minus_1_0_1_0 returns Plus
	 *     MulOrDiv returns Plus
	 *     MulOrDiv.MulOrDiv_1_0 returns Plus
	 *     Primary returns Plus
	 *
	 * Constraint:
	 *     (left=PlusOrMinus_Plus_1_0_0_0 right=MulOrDiv)
	 */
	protected void sequence_PlusOrMinus(ISerializationContext context, Plus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmcPackage.Literals.PLUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmcPackage.Literals.PLUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, SmcPackage.Literals.PLUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmcPackage.Literals.PLUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getPlusLeftAction_1_0_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getPlusOrMinusAccess().getRightMulOrDivParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Not
	 *     Or returns Not
	 *     Or.Or_1_0 returns Not
	 *     And returns Not
	 *     And.And_1_0 returns Not
	 *     Equality returns Not
	 *     Equality.Equality_1_0 returns Not
	 *     Comparison returns Not
	 *     Comparison.Comparison_1_0 returns Not
	 *     PlusOrMinus returns Not
	 *     PlusOrMinus.Plus_1_0_0_0 returns Not
	 *     PlusOrMinus.Minus_1_0_1_0 returns Not
	 *     MulOrDiv returns Not
	 *     MulOrDiv.MulOrDiv_1_0 returns Not
	 *     Primary returns Not
	 *
	 * Constraint:
	 *     expression=Primary
	 */
	protected void sequence_Primary(ISerializationContext context, Not semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmcPackage.Literals.NOT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmcPackage.Literals.NOT__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Print
	 *     Print returns Print
	 *
	 * Constraint:
	 *     value=Expression
	 */
	protected void sequence_Print(ISerializationContext context, Print semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmcPackage.Literals.PRINT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmcPackage.Literals.PRINT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrintAccess().getValueExpressionParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Smc returns Smc
	 *
	 * Constraint:
	 *     (blocks+=BlockSMC | main=MainSMC)+
	 */
	protected void sequence_Smc(ISerializationContext context, Smc semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns VariableAssignment
	 *     VariableAssignment returns VariableAssignment
	 *
	 * Constraint:
	 *     (var=[VariableDecl|ID] exp=Expression)
	 */
	protected void sequence_VariableAssignment(ISerializationContext context, VariableAssignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmcPackage.Literals.VARIABLE_ASSIGNMENT__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmcPackage.Literals.VARIABLE_ASSIGNMENT__VAR));
			if (transientValues.isValueTransient(semanticObject, SmcPackage.Literals.VARIABLE_ASSIGNMENT__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmcPackage.Literals.VARIABLE_ASSIGNMENT__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAssignmentAccess().getVarVariableDeclIDTerminalRuleCall_0_0_1(), semanticObject.eGet(SmcPackage.Literals.VARIABLE_ASSIGNMENT__VAR, false));
		feeder.accept(grammarAccess.getVariableAssignmentAccess().getExpExpressionParserRuleCall_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns VariableDecl
	 *     VariableDecl returns VariableDecl
	 *
	 * Constraint:
	 *     (type=BasicType name=ID exp=Expression?)
	 */
	protected void sequence_VariableDecl(ISerializationContext context, VariableDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns While
	 *     While returns While
	 *
	 * Constraint:
	 *     (condition=Expression body=Command)
	 */
	protected void sequence_While(ISerializationContext context, While semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmcPackage.Literals.WHILE__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmcPackage.Literals.WHILE__CONDITION));
			if (transientValues.isValueTransient(semanticObject, SmcPackage.Literals.WHILE__BODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmcPackage.Literals.WHILE__BODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWhileAccess().getConditionExpressionParserRuleCall_2_0(), semanticObject.getCondition());
		feeder.accept(grammarAccess.getWhileAccess().getBodyCommandParserRuleCall_4_0(), semanticObject.getBody());
		feeder.finish();
	}
	
	
}
