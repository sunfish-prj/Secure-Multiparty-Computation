/**
 * generated by Xtext 2.12.0
 */
package soton.cybersec.smcaas.smc.generator;

import com.google.common.collect.Iterables;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import soton.cybersec.smcaas.smc.smc.AbstractAssignment;
import soton.cybersec.smcaas.smc.smc.And;
import soton.cybersec.smcaas.smc.smc.BasicType;
import soton.cybersec.smcaas.smc.smc.Block;
import soton.cybersec.smcaas.smc.smc.BlockSMC;
import soton.cybersec.smcaas.smc.smc.BlockType;
import soton.cybersec.smcaas.smc.smc.BooleanLiteral;
import soton.cybersec.smcaas.smc.smc.Command;
import soton.cybersec.smcaas.smc.smc.Comparison;
import soton.cybersec.smcaas.smc.smc.DateLiteral;
import soton.cybersec.smcaas.smc.smc.DoubleLiteral;
import soton.cybersec.smcaas.smc.smc.Download;
import soton.cybersec.smcaas.smc.smc.Equality;
import soton.cybersec.smcaas.smc.smc.Expression;
import soton.cybersec.smcaas.smc.smc.Functions;
import soton.cybersec.smcaas.smc.smc.IfThenElse;
import soton.cybersec.smcaas.smc.smc.IntLiteral;
import soton.cybersec.smcaas.smc.smc.Invocation;
import soton.cybersec.smcaas.smc.smc.InvocationVoid;
import soton.cybersec.smcaas.smc.smc.List;
import soton.cybersec.smcaas.smc.smc.MainSMC;
import soton.cybersec.smcaas.smc.smc.MulOrDiv;
import soton.cybersec.smcaas.smc.smc.Not;
import soton.cybersec.smcaas.smc.smc.Or;
import soton.cybersec.smcaas.smc.smc.ParamDecl;
import soton.cybersec.smcaas.smc.smc.PlusOrMinus;
import soton.cybersec.smcaas.smc.smc.Print;
import soton.cybersec.smcaas.smc.smc.SecType;
import soton.cybersec.smcaas.smc.smc.Smc;
import soton.cybersec.smcaas.smc.smc.StringLiteral;
import soton.cybersec.smcaas.smc.smc.TimeLiteral;
import soton.cybersec.smcaas.smc.smc.VariableAssignment;
import soton.cybersec.smcaas.smc.smc.VariableDecl;
import soton.cybersec.smcaas.smc.smc.VariableRef;
import soton.cybersec.smcaas.smc.smc.While;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SmcGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Smc> _filter = Iterables.<Smc>filter(resource.getContents(), Smc.class);
    for (final Smc e : _filter) {
      fsa.generateFile("main.sc", this.compile(e));
    }
  }
  
  public CharSequence compile(final Smc smc) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import shared3p;");
    _builder.newLine();
    _builder.append("import shared3p_table_database;");
    _builder.newLine();
    _builder.append("import stdlib;");
    _builder.newLine();
    _builder.append("import table_database;");
    _builder.newLine();
    _builder.append("import shared3p_bloom;");
    _builder.newLine();
    _builder.append("import shared3p_random;");
    _builder.newLine();
    _builder.append("import shared3p_aes;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("domain pd_shared3p shared3p;");
    _builder.newLine();
    _builder.newLine();
    {
      EList<BlockSMC> _blocks = smc.getBlocks();
      for(final BlockSMC block : _blocks) {
        CharSequence _compile = this.compile(block);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      MainSMC _main = smc.getMain();
      boolean _tripleNotEquals = (_main != null);
      if (_tripleNotEquals) {
        CharSequence _compile_1 = this.compile(smc.getMain());
        _builder.append(_compile_1);
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final BlockSMC block) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _switchResult = null;
    BlockType _type = block.getType();
    if (_type != null) {
      switch (_type) {
        case INSERT:
          StringConcatenation _builder_1 = new StringConcatenation();
          _switchResult = _builder_1;
          break;
        case COMP:
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("comp - TO ADD MODULE");
          _switchResult = _builder_2;
          break;
        case SEARCH:
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("search - TO ADD MODULE");
          _switchResult = _builder_3;
          break;
        case ANONYMIZATION:
          StringConcatenation _builder_4 = new StringConcatenation();
          _builder_4.append("anon - TO ADD MODULE");
          _switchResult = _builder_4;
          break;
        case ACCESS:
          StringConcatenation _builder_5 = new StringConcatenation();
          _builder_5.append("access - TO ADD MODULE");
          _switchResult = _builder_5;
          break;
        case PERMISSION:
          StringConcatenation _builder_6 = new StringConcatenation();
          _builder_6.append("perm - TO ADD MODULE");
          _switchResult = _builder_6;
          break;
        default:
          break;
      }
    }
    _builder.append(_switchResult);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  /**
   * blocks
   */
  public CharSequence addDataset() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("void addDataset(string ds, string tbl, string [[1]] clm_names, pd_shared3p uint64 [[2]] values){");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// First create table");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("uint params = tdbVmapNew();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("for (uint i = 0; i < size(clm_names); ++i) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("pd_shared3p uint64 vtype;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("tdbVmapAddType(params, \"types\", vtype);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("tdbVmapAddString(params, \"names\", clm_names[i]);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("tdbTableCreate(ds, tbl, params);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("// Then insert values into database:");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("uint length = size(values) / size(clm_names);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("for (uint i = 0; i < length; ++i) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("tdbVmapClear(params);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("for (uint j = 0; j < size(clm_names); ++j) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("tdbVmapAddValue(params, \"values\", values[j]);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("tdbInsertRow(ds, tbl, params);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("tdbVmapDelete(params);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("return tbl;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final MainSMC mainSmc) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("void main() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("string ds = \"DS1\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("tdbOpenConnection(ds);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Command> _commands = mainSmc.getCommands();
      for(final Command c : _commands) {
        _builder.append("\t");
        Object _compileCommand = this.compileCommand(c);
        _builder.append(_compileCommand, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("tdbCloseConnection(ds);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * commands
   */
  protected Object _compileCommand(final Command c) {
    return this.compileCommand(c);
  }
  
  protected Object _compileCommand(final Block c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    {
      EList<Command> _commands = c.getCommands();
      for(final Command x : _commands) {
        _builder.append("\t");
        Object _compileCommand = this.compileCommand(x);
        _builder.append(_compileCommand, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  protected Object _compileCommand(final VariableDecl c) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _toSecrecVisibility = this.getToSecrecVisibility(c.getVisibility());
    _builder.append(_toSecrecVisibility);
    _builder.append(" ");
    CharSequence _toSecrecType = this.getToSecrecType(c.getType());
    _builder.append(_toSecrecType);
    _builder.append(" ");
    _builder.newLineIfNotEmpty();
    {
      boolean _isArray = c.isArray();
      if (_isArray) {
        _builder.append("[[1]] ");
      }
    }
    String _name = c.getName();
    _builder.append(_name);
    _builder.newLineIfNotEmpty();
    {
      AbstractAssignment _option = c.getOption();
      boolean _tripleNotEquals = (_option != null);
      if (_tripleNotEquals) {
        _builder.append(" = ");
        CharSequence _compileAssignment = this.compileAssignment(c.getOption());
        _builder.append(_compileAssignment);
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append(";");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _compileAssignment(final Expression a) {
    StringConcatenation _builder = new StringConcatenation();
    Object _compileEx = this.compileEx(a);
    _builder.append(_compileEx);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _compileAssignment(final Download a) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("argument(\"");
    String _arg = a.getArg();
    _builder.append(_arg);
    _builder.append("\")");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence getToSecrecVisibility(final SecType type) {
    CharSequence _switchResult = null;
    if (type != null) {
      switch (type) {
        case PUBLIC:
          StringConcatenation _builder = new StringConcatenation();
          _switchResult = _builder;
          break;
        case PRIVATE:
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("pd_shared3p");
          _switchResult = _builder_1;
          break;
        default:
          break;
      }
    }
    return _switchResult;
  }
  
  public CharSequence getToSecrecType(final BasicType type) {
    CharSequence _switchResult = null;
    if (type != null) {
      switch (type) {
        case INT:
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("uint64");
          _switchResult = _builder;
          break;
        case DOUBLE:
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("float64");
          _switchResult = _builder_1;
          break;
        case BOOLEAN:
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("bool");
          _switchResult = _builder_2;
          break;
        case STRING:
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("string");
          _switchResult = _builder_3;
          break;
        case ENCRYPTED:
          StringConcatenation _builder_4 = new StringConcatenation();
          _builder_4.append("xor_uint64");
          _switchResult = _builder_4;
          break;
        default:
          break;
      }
    }
    return _switchResult;
  }
  
  protected Object _compileCommand(final VariableAssignment c) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = c.getVar().getName();
    _builder.append(_name);
    _builder.append(" = ");
    CharSequence _compileAssignment = this.compileAssignment(c.getOption());
    _builder.append(_compileAssignment);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected Object _compileCommand(final IfThenElse c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("if(");
    Object _compileEx = this.compileEx(c.getCondition());
    _builder.append(_compileEx);
    _builder.append(")");
    Object _compileCommand = this.compileCommand(c.getThenBrach());
    _builder.append(_compileCommand);
    _builder.newLineIfNotEmpty();
    {
      Command _elseBranch = c.getElseBranch();
      boolean _tripleNotEquals = (_elseBranch != null);
      if (_tripleNotEquals) {
        _builder.append("else ");
        Object _compileCommand_1 = this.compileCommand(c.getElseBranch());
        _builder.append(_compileCommand_1);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected Object _compileCommand(final While c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("while (");
    Object _compileEx = this.compileEx(c.getCondition());
    _builder.append(_compileEx);
    _builder.append(") ");
    Object _compileCommand = this.compileCommand(c.getBody());
    _builder.append(_compileCommand);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected Object _compileCommand(final Print c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("print(\"");
    Object _compileEx = this.compileEx(c.getValue());
    _builder.append(_compileEx);
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected Object _compileCommand(final InvocationVoid c) {
    StringConcatenation _builder = new StringConcatenation();
    Object _compileEx = this.compileEx(c.getCall());
    _builder.append(_compileEx);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected Object _compileCommand(final ParamDecl c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t\t");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * expressions
   */
  protected Object _compileEx(final Expression e) {
    return this.compileEx(e);
  }
  
  protected Object _compileEx(final Or e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    Object _compileEx = this.compileEx(e.getLeft());
    _builder.append(_compileEx);
    _builder.append(") || (");
    Object _compileEx_1 = this.compileEx(e.getRight());
    _builder.append(_compileEx_1);
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected Object _compileEx(final And e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    Object _compileEx = this.compileEx(e.getLeft());
    _builder.append(_compileEx);
    _builder.append(") && (");
    Object _compileEx_1 = this.compileEx(e.getRight());
    _builder.append(_compileEx_1);
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected Object _compileEx(final Equality e) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _switchResult = null;
    String _op = e.getOp();
    if (_op != null) {
      switch (_op) {
        case "==":
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("(");
          Object _compileEx = this.compileEx(e.getLeft());
          _builder_1.append(_compileEx);
          _builder_1.append(") == (");
          Object _compileEx_1 = this.compileEx(e.getRight());
          _builder_1.append(_compileEx_1);
          _builder_1.append(")");
          _switchResult = _builder_1;
          break;
        case "!=":
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("(");
          Object _compileEx_2 = this.compileEx(e.getLeft());
          _builder_2.append(_compileEx_2);
          _builder_2.append(") != (");
          Object _compileEx_3 = this.compileEx(e.getRight());
          _builder_2.append(_compileEx_3);
          _builder_2.append(")");
          _switchResult = _builder_2;
          break;
      }
    }
    _builder.append(_switchResult);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected Object _compileEx(final Comparison e) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _switchResult = null;
    String _op = e.getOp();
    if (_op != null) {
      switch (_op) {
        case ">=":
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("(");
          Object _compileEx = this.compileEx(e.getLeft());
          _builder_1.append(_compileEx);
          _builder_1.append(") >= (");
          Object _compileEx_1 = this.compileEx(e.getRight());
          _builder_1.append(_compileEx_1);
          _builder_1.append(")");
          _switchResult = _builder_1;
          break;
        case "<=":
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("(");
          Object _compileEx_2 = this.compileEx(e.getLeft());
          _builder_2.append(_compileEx_2);
          _builder_2.append(") <= (");
          Object _compileEx_3 = this.compileEx(e.getRight());
          _builder_2.append(_compileEx_3);
          _builder_2.append(")");
          _switchResult = _builder_2;
          break;
        case ">":
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("(");
          Object _compileEx_4 = this.compileEx(e.getLeft());
          _builder_3.append(_compileEx_4);
          _builder_3.append(") > (");
          Object _compileEx_5 = this.compileEx(e.getRight());
          _builder_3.append(_compileEx_5);
          _builder_3.append(")");
          _switchResult = _builder_3;
          break;
        case "<":
          StringConcatenation _builder_4 = new StringConcatenation();
          _builder_4.append("(");
          Object _compileEx_6 = this.compileEx(e.getLeft());
          _builder_4.append(_compileEx_6);
          _builder_4.append(") < (");
          Object _compileEx_7 = this.compileEx(e.getRight());
          _builder_4.append(_compileEx_7);
          _builder_4.append(")");
          _switchResult = _builder_4;
          break;
      }
    }
    _builder.append(_switchResult);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected Object _compileEx(final PlusOrMinus e) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _switchResult = null;
    String _op = e.getOp();
    if (_op != null) {
      switch (_op) {
        case "+":
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("(");
          Object _compileEx = this.compileEx(e.getLeft());
          _builder_1.append(_compileEx);
          _builder_1.append(") + (");
          Object _compileEx_1 = this.compileEx(e.getRight());
          _builder_1.append(_compileEx_1);
          _builder_1.append(")");
          _switchResult = _builder_1;
          break;
        case "-":
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("(");
          Object _compileEx_2 = this.compileEx(e.getLeft());
          _builder_2.append(_compileEx_2);
          _builder_2.append(") - (");
          Object _compileEx_3 = this.compileEx(e.getRight());
          _builder_2.append(_compileEx_3);
          _builder_2.append(")");
          _switchResult = _builder_2;
          break;
      }
    }
    _builder.append(_switchResult);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected Object _compileEx(final MulOrDiv e) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _switchResult = null;
    String _op = e.getOp();
    if (_op != null) {
      switch (_op) {
        case "*":
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("(");
          Object _compileEx = this.compileEx(e.getLeft());
          _builder_1.append(_compileEx);
          _builder_1.append(") * (");
          Object _compileEx_1 = this.compileEx(e.getRight());
          _builder_1.append(_compileEx_1);
          _builder_1.append(")");
          _switchResult = _builder_1;
          break;
        case "/":
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("(");
          Object _compileEx_2 = this.compileEx(e.getLeft());
          _builder_2.append(_compileEx_2);
          _builder_2.append(") / (");
          Object _compileEx_3 = this.compileEx(e.getRight());
          _builder_2.append(_compileEx_3);
          _builder_2.append(")");
          _switchResult = _builder_2;
          break;
      }
    }
    _builder.append(_switchResult);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected Object _compileEx(final Not e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("!(");
    Object _compileEx = this.compileEx(e.getExpression());
    _builder.append(_compileEx);
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected Object _compileEx(final IntLiteral e) {
    StringConcatenation _builder = new StringConcatenation();
    int _value = e.getValue();
    _builder.append(_value);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected Object _compileEx(final DoubleLiteral e) {
    StringConcatenation _builder = new StringConcatenation();
    double _value = e.getValue();
    _builder.append(_value);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected Object _compileEx(final BooleanLiteral e) {
    StringConcatenation _builder = new StringConcatenation();
    boolean _isValue = e.isValue();
    _builder.append(_isValue);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected Object _compileEx(final StringLiteral e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"");
    String _value = e.getValue();
    _builder.append(_value);
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected Object _compileEx(final DateLiteral e) {
    StringConcatenation _builder = new StringConcatenation();
    String _value = e.getValue();
    _builder.append(_value);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected Object _compileEx(final TimeLiteral e) {
    StringConcatenation _builder = new StringConcatenation();
    String _value = e.getValue();
    _builder.append(_value);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected Object _compileEx(final VariableRef e) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = e.getVariable().getName();
    _builder.append(_name);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected Object _compileEx(final List e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    {
      EList<Expression> _args = e.getArgs();
      boolean _hasElements = false;
      for(final Expression x : _args) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "\t\t");
        }
        _builder.append("\t\t");
        Object _compileEx = this.compileEx(x);
        _builder.append(_compileEx, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
      }
    }
    _builder.append("}");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected Object _compileEx(final Invocation c) {
    CharSequence _switchResult = null;
    BlockType _type = c.getBlockName().getType();
    if (_type != null) {
      switch (_type) {
        case INSERT:
          CharSequence _switchResult_1 = null;
          Functions _funcName = c.getFuncName();
          if (_funcName != null) {
            switch (_funcName) {
              case CREATE_DB:
                StringConcatenation _builder = new StringConcatenation();
                _builder.append("if (tdbTableExists(ds, tbl)) {");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("print(\"Table `\" + tbl + \"` already exists, deleting...\");");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("tdbTableDelete(ds, tbl);");
                _builder.newLine();
                _builder.append("}");
                _builder.newLine();
                _builder.newLine();
                {
                  EList<ParamDecl> _args = c.getArgs();
                  boolean _tripleNotEquals = (_args != null);
                  if (_tripleNotEquals) {
                    _builder.append("uint params = tdbVmapNew();");
                    _builder.newLine();
                    _builder.newLine();
                    {
                      EList<ParamDecl> _args_1 = c.getArgs();
                      for(final ParamDecl x : _args_1) {
                        _builder.append("{");
                        _builder.newLine();
                        _builder.append("\t");
                        CharSequence _toSecrecVisibility = this.getToSecrecVisibility(x.getStype());
                        _builder.append(_toSecrecVisibility, "\t");
                        _builder.append(" ");
                        CharSequence _toSecrecType = this.getToSecrecType(x.getBtype());
                        _builder.append(_toSecrecType, "\t");
                        _builder.append(" vtype;");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("tdbVmapAddType(params, \"types\", vtype);");
                        _builder.newLine();
                        _builder.append("\t");
                        _builder.append("tdbVmapAddString(params, \"names\", \"");
                        String _parName = x.getParName();
                        _builder.append(_parName, "\t");
                        _builder.append("\");");
                        _builder.newLineIfNotEmpty();
                        _builder.append("}");
                        _builder.newLine();
                        _builder.newLine();
                      }
                    }
                  }
                }
                _builder.append("tdbTableCreate(ds, tbl, params);");
                _builder.newLine();
                _builder.newLine();
                _builder.append("tdbVmapDelete(params);");
                _builder.newLine();
                _switchResult_1 = _builder;
                break;
              case ADD_VALUES:
                StringConcatenation _builder_1 = new StringConcatenation();
                _builder_1.append("tdbVmapClear(params);");
                _builder_1.newLine();
                {
                  EList<ParamDecl> _args_2 = c.getArgs();
                  boolean _tripleNotEquals_1 = (_args_2 != null);
                  if (_tripleNotEquals_1) {
                    {
                      EList<ParamDecl> _args_3 = c.getArgs();
                      boolean _hasElements = false;
                      for(final ParamDecl x_1 : _args_3) {
                        if (!_hasElements) {
                          _hasElements = true;
                        } else {
                          _builder_1.appendImmediate(",", "");
                        }
                        _builder_1.append("tdbVmapAddValue(params, \"values\", ");
                        String _name = x_1.getName();
                        _builder_1.append(_name);
                        _builder_1.append(");");
                        _builder_1.newLineIfNotEmpty();
                      }
                    }
                  }
                }
                _builder_1.append("tdbInsertRow(ds, tbl, params);");
                _builder_1.newLine();
                _builder_1.append("tdbVmapDelete(params);");
                _builder_1.newLine();
                _switchResult_1 = _builder_1;
                break;
              default:
                break;
            }
          }
          _switchResult = _switchResult_1;
          break;
        case ACCESS:
          _switchResult = null;
          break;
        case ANONYMIZATION:
          _switchResult = null;
          break;
        case COMP:
          _switchResult = null;
          break;
        case PERMISSION:
          _switchResult = null;
          break;
        case SEARCH:
          _switchResult = null;
          break;
        default:
          break;
      }
    }
    return _switchResult;
  }
  
  public Object compileCommand(final Command c) {
    if (c instanceof Block) {
      return _compileCommand((Block)c);
    } else if (c instanceof IfThenElse) {
      return _compileCommand((IfThenElse)c);
    } else if (c instanceof InvocationVoid) {
      return _compileCommand((InvocationVoid)c);
    } else if (c instanceof ParamDecl) {
      return _compileCommand((ParamDecl)c);
    } else if (c instanceof Print) {
      return _compileCommand((Print)c);
    } else if (c instanceof VariableAssignment) {
      return _compileCommand((VariableAssignment)c);
    } else if (c instanceof VariableDecl) {
      return _compileCommand((VariableDecl)c);
    } else if (c instanceof While) {
      return _compileCommand((While)c);
    } else if (c != null) {
      return _compileCommand(c);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(c).toString());
    }
  }
  
  public CharSequence compileAssignment(final AbstractAssignment a) {
    if (a instanceof Download) {
      return _compileAssignment((Download)a);
    } else if (a instanceof Expression) {
      return _compileAssignment((Expression)a);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(a).toString());
    }
  }
  
  public Object compileEx(final Expression e) {
    if (e instanceof And) {
      return _compileEx((And)e);
    } else if (e instanceof BooleanLiteral) {
      return _compileEx((BooleanLiteral)e);
    } else if (e instanceof Comparison) {
      return _compileEx((Comparison)e);
    } else if (e instanceof DateLiteral) {
      return _compileEx((DateLiteral)e);
    } else if (e instanceof DoubleLiteral) {
      return _compileEx((DoubleLiteral)e);
    } else if (e instanceof Equality) {
      return _compileEx((Equality)e);
    } else if (e instanceof IntLiteral) {
      return _compileEx((IntLiteral)e);
    } else if (e instanceof Invocation) {
      return _compileEx((Invocation)e);
    } else if (e instanceof List) {
      return _compileEx((List)e);
    } else if (e instanceof MulOrDiv) {
      return _compileEx((MulOrDiv)e);
    } else if (e instanceof Not) {
      return _compileEx((Not)e);
    } else if (e instanceof Or) {
      return _compileEx((Or)e);
    } else if (e instanceof PlusOrMinus) {
      return _compileEx((PlusOrMinus)e);
    } else if (e instanceof StringLiteral) {
      return _compileEx((StringLiteral)e);
    } else if (e instanceof TimeLiteral) {
      return _compileEx((TimeLiteral)e);
    } else if (e instanceof VariableRef) {
      return _compileEx((VariableRef)e);
    } else if (e != null) {
      return _compileEx(e);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(e).toString());
    }
  }
}
