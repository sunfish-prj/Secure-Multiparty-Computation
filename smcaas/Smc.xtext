grammar soton.cyber.smcaas.SMC with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate SMC "http://www.cyber.soton/smcaas/SMC"

SMC:
	blocks+=BlockSMC* &
	main=MainSMC?
;
	
BlockSMC:
	'block' type=BlockType name=ID '=' 'new' '('(parameters+=Expression (',' parameters+=Expression)*)? ')'';'
;


enum BlockType:
	INSERT = 'insert_data' | COMP = 'math_computation' | SEARCH = 'search' | ANONYMIZATION = 'anonymization' | 
	ACCESS = 'access_control' | PERMISSION = 'permission_release'
;

MainSMC:
	'main' {MainSMC} '{'
		commands+=Command*
	'}'
;

Command:
	Block | VariableDecl  | VariableAssignment | IfThenElse | While | Print | Invocation 
;

Block returns Command: 
	{Block} '{' ( commands+=Command )* '}'
;


Print:
	'print' '(' value = Expression ')' ';'
;

While:
	'while' '(' condition=Expression ')' body=Command
;

IfThenElse:
	'if' '(' condition=Expression ')' thenBrach=Command (=> 'else' elseBranch=Command )?
;

VariableDecl: 
	'var' type=BasicType name=ID ('=' exp=Expression)? ';'
;

enum BasicType: 
	INT | DOUBLE | BOOLEAN | STRING | LIST='[]' | TUPLE='tuple'
;

VariableAssignment: 
	var=[VariableDecl] '=' exp=Expression ';'
;


Expression:
	Or 
;

Or returns Expression:
  And ({Or.left=current} "||" right=And)* ;

And returns Expression:
  Equality ({And.left=current} "&&" right=Equality)* ;

Equality returns Expression:
  Comparison (
    {Equality.left=current} op=("=="|"!=")
    right=Comparison
  )* ;

Comparison returns Expression:
  PlusOrMinus (
    {Comparison.left=current} op=(">="|"<="|">"|"<")
    right=PlusOrMinus
  )* ;

PlusOrMinus returns Expression:
  MulOrDiv (
    ({Plus.left=current} '+' | {Minus.left=current} '-')
    right=MulOrDiv
  )* ;

MulOrDiv returns Expression:
  Primary (
    {MulOrDiv.left=current} op=('*'|'/')
    right=Primary
  )*
;

Primary returns Expression:
  '(' Expression ')' |
  {Not} "!" expression=Primary |
  Atomic
;


Atomic returns Expression:
	{IntLiteral} value=INT
	| {DoubleLiteral} value=REAL
	| {BooleanLiteral} value=BOOLEAN
	| {StringLiteral} value=STRING
	| {DateLiteral} value=DATE
	| {TimeLiteral} value=TIME
	| {VariableRef} variable=[VariableDecl]
	| List
	| Invocation
;

List:
	'list(' (args+=Atomic (',' args+=Atomic)*) ')'
;

Invocation: 
	blockName=[BlockSMC] '.' function=ID '(' (args+=Expression (',' args+=Expression)*)? ')'
;

//Standard types
terminal BOOLEAN returns ecore::EBoolean:
	'true' | 'false';

/* NB INTEGER UNSIGNED! */
terminal INT returns ecore::EInt:
	('0'..'9')+;

terminal DATE:
	(INT '/' INT '/' INT);

terminal TIME:
	(INT ':' INT ':' INT);

terminal REAL returns ecore::EDouble:
	('+' | '-')? ('0'..'9')* ('.' ('0'..'9')+)?;

terminal STRING:
	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"' | '/'))* '"' |
	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | "'" | '/'))* "'"; 
	
terminal ML_COMMENT:
	'/*'->'*/';

terminal SL_COMMENT:
	'//' !('\n' | '\r')* ('\r'? '\n')?;